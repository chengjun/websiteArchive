<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>D3 on Academic</title>
    <link>https://chengjunwang.com/zh/tags/d3/</link>
    <description>Recent content in D3 on Academic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2016 Cheng-Jun Wang</copyright>
    <lastBuildDate>Wed, 27 Aug 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chengjunwang.com/zh/tags/d3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用d3network做网络可视化</title>
      <link>https://chengjunwang.com/zh/post/cn/2014-08-27-d3network/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chengjunwang.com/zh/post/cn/2014-08-27-d3network/</guid>
      <description>在之前的一个博客中，我介绍了使用R进行社区划分并可视化的方法。这里使用相同的数据，介绍如何使用d3network实现网络可视化的方法。
首先，安装d3network
devtools::install_github(&amp;quot;d3Network&amp;quot;, &amp;quot;christophergandrud&amp;quot;) require(d3Network)  之后可以使用简单的可视化方法：
d3SimpleNetwork(data[,1:2], file = &amp;quot;chinese_university100.html&amp;quot;, width = 1024, height = 763, fontsize = 12)  我想要展现社区划分的结果：
#链接数据 links = data names(links) = c(&amp;quot;source&amp;quot;, &amp;quot;target&amp;quot;, &amp;quot;value&amp;quot;) #节点列表 fc = fastgreedy.community(g); sizes(fc) mfc = membership(fc) nodes = data.frame(name = names(mfc), group = mfc) #对应链接数据和节点数据 ids = 0:(nrow(nodes)-1) # notice: start with zero! links[,1] = ids[match(links[,1], nodes$name )] links[,2] = ids[match(links[,2], nodes$name )] links = links[with(links, order(source)), ] # sort by source #处理边的权重大小 links$value = log(links$value)  之后就可以使实现可视化结果啦：</description>
    </item>
    
    <item>
      <title>空间分析初步：使用D3可视化</title>
      <link>https://chengjunwang.com/zh/post/cn/2014-03-15-d3-map/</link>
      <pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chengjunwang.com/zh/post/cn/2014-03-15-d3-map/</guid>
      <description>图1 D3 examples
###1. 起源 斯坦福学校可视化团队Jeff Heer教授, 那时候的博士生Mike Bostock,那时候的硕士生 Vadim Ogievetsky在2009年创造了Protovis：一个从数据中生成 SVG 图的工具。2011年, Bostock和的老板Heer、师弟Ogievetsky开发了D3.js (Bostock, Heer &amp;amp; Ogievetsky 2011).
图2 Eyeo 2013 - Mike Bostock
此后，Mike Bostocks致力于D3的继续开发和维护， Mike的网站http://bost.ocks.org/和github（https://github.com/mbostock/d3）成为发展D3力量的重要领地。仅仅三年，作为一个社区（community)，D3的发展已经蔚为大观。
###2. D3是什么？ D3是数据驱动文件（Data-Driven Documents）的缩写。作为一个javascript的库，D3(或D3.js)建构于电子数据（digital data）之上，使用数据创造并控制在网络浏览器里运行的动态交互的图形。
D3必须要嵌入到html网页中，它依赖矢量图像（Scalable Vector Graphics，SVG）、层叠式样式表（Cascading Style Sheets，CSS3)等html的工具来展示图形。
JavaScript函数来选择（select）元素，生成矢量图（SVG），赋予其样式（style），加入变化。 这种函数式的操作使得D3可以很容易的将大的数据（large dataset,而不是big data）从原始数据格式（json, csv， geoJSON, topoJOSON）转为矢量图对象，并且速度非常快。
D3拥有自己的哲学，其中很重要的一条是Thinking with Joins。比如，读者与D3制作的图形交互的时候，会激发数据请求（如选择某一个时间段的数据），新的数据进来（data enter），D3的元素（如svg）就会相应的更新（elements update）。数据与元素的互动是由D3编写的Javascript函数指导的，交互之后之后互动结束，读者就看到一个新的图形了。一个例子是使用D3制作的《悲惨世界》中人物的共现关系（Les Misérables Co-occurrence）。这样做的好处是使得动态的图形展示变得简单。
图3 Thinking with Joins
3. 学习D3 学习使用D3可以从这个Tutorials开始。
4. 使用D3绘制网络 因为网络的可视化相对简单，因而发展也比较成熟。R社区很快开发了R包d3network
5. 使用D3绘制地图 Christchurch 2010 Timeline这个例子正是我想要的。
一些其它的例子。
Let’s Make a Map</description>
    </item>
    
  </channel>
</rss>
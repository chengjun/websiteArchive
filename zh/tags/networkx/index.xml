<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networkx on Academic</title>
    <link>https://chengjunwang.com/zh/tags/networkx/</link>
    <description>Recent content in Networkx on Academic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2016 Cheng-Jun Wang</copyright>
    <lastBuildDate>Thu, 14 Aug 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chengjunwang.com/zh/tags/networkx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NetworkX初步：创建网络、提取属性和绘图</title>
      <link>https://chengjunwang.com/zh/post/cn/2014-08-14-networkx-intro/</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chengjunwang.com/zh/post/cn/2014-08-14-networkx-intro/</guid>
      <description>NetworkX是使用python分析网络数据的重要武器。它的使用非常简单。
首先，创建网络对象：
import matplotlib.pyplot as plt import networkx as nx G=nx.DiGraph()  然后，添加链接：
G.add_edge(&#39;source&#39;,1,weight=80) G.add_edge(1,2,weight=50) G.add_edge(1,3,weight=30) G.add_edge(3,2,weight=10) G.add_edge(2,4,weight=20) G.add_edge(2,5,weight=30) G.add_edge(4,5,weight=10) G.add_edge(5,3,weight=5) G.add_edge(2,&#39;sink&#39;,weight=10) G.add_edge(4,&#39;sink&#39;,weight=10) G.add_edge(3,&#39;sink&#39;,weight=25) G.add_edge(5,&#39;sink&#39;,weight=35)  可以很容易提取边的权重:
edges,colors = zip(*nx.get_edge_attributes(G,&#39;weight&#39;).items())  计算加权过的出度：
d = G.out_degree(weight = &#39;weight&#39;) #计算节点的中心度  选择一个常用的可视化方法：
pos=nx.spring_layout(G) #设置网络的布局  绘制网络:
nx.draw(G, pos, node_color = &#39;orange&#39;, with_labels = True, nodelist = d.keys(), node_size = [v*5 for v in d.values()], edgelist = edges, edge_color = colors, width = 5, edge_cmap=plt.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算新闻s | Cheng-Jun Wang</title>
    <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/</link>
      <atom:link href="https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/index.xml" rel="self" type="application/rss+xml" />
    <description>计算新闻s</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><copyright>All rights © reserved 2020</copyright><lastBuildDate>Thu, 13 Feb 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://chengjunwang.com/img/headers/deer.webp</url>
      <title>计算新闻s</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/</link>
    </image>
    
    <item>
      <title>2019确诊人数最多的小区是哪一个？</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/2019ncov%E7%A1%AE%E8%AF%8A%E4%BA%BA%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%B0%8F%E5%8C%BA%E6%98%AF%E5%93%AA%E4%B8%80%E4%B8%AA/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/2019ncov%E7%A1%AE%E8%AF%8A%E4%BA%BA%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%B0%8F%E5%8C%BA%E6%98%AF%E5%93%AA%E4%B8%80%E4%B8%AA/</guid>
      <description>&lt;p&gt; &lt;/p&gt;

&lt;p&gt;来回答一个&lt;strong&gt;问题&lt;/strong&gt;：已经开放的数据当中，确诊人数最多的小区是哪一个？&lt;/p&gt;

&lt;p&gt;前文介绍了akshare的安装和简单使用，本文介绍使用akshare获取细化到每个小区的确诊人数数据。腾讯提供了一个公开的数据，可以供查询。为此，我们将使用到akshare的epidemic_area_detail接口。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;epidemic_area_detail()
     细化到每个小区的确诊人数
    需要遍历每个页面, 如非必要, 请勿运行
    &lt;a href=&#34;https://ncov.html5.qq.com/community?channelid=1&amp;amp;from=singlemessage&amp;amp;isappinstalled=0&#34; target=&#34;_blank&#34;&gt;https://ncov.html5.qq.com/community?channelid=1&amp;amp;from=singlemessage&amp;amp;isappinstalled=0&lt;/a&gt;
    :return: 全国每个小区的确诊人数
    :rtype: pandas.DataFrame&lt;/pre&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;import akshare as ak
epidemic_area_detail_df = ak.epidemic_area_detail()
print(epidemic_area_detail_df)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一共1070, 要等待一会儿。&lt;/p&gt;

&lt;p&gt;下载完成后，我们可以看一下江苏的数据：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-2001461b03bc2d80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;先看一下每个小区的确诊人数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;epidemic_area_detail_df[&#39;cnt_sum_certain&#39;].unique()
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;array([&amp;lsquo;2&amp;rsquo;, &amp;lsquo;4&amp;rsquo;, &amp;lsquo;1&amp;rsquo;, &amp;lsquo;-1&amp;rsquo;, &amp;lsquo;3&amp;rsquo;, &amp;lsquo;5&amp;rsquo;, &amp;lsquo;7&amp;rsquo;, &amp;lsquo;10&amp;rsquo;, &amp;lsquo;6&amp;rsquo;, &amp;lsquo;8&amp;rsquo;, &amp;lsquo;9&amp;rsquo;, &amp;lsquo;12&amp;rsquo;,
       &amp;lsquo;14&amp;rsquo;, &amp;lsquo;19&amp;rsquo;, &amp;lsquo;13&amp;rsquo;, &amp;lsquo;11&amp;rsquo;, &amp;lsquo;256&amp;rsquo;, &amp;lsquo;119&amp;rsquo;, &amp;lsquo;31&amp;rsquo;, &amp;lsquo;15&amp;rsquo;, &amp;lsquo;22&amp;rsquo;, &amp;lsquo;16&amp;rsquo;, &amp;lsquo;39&amp;rsquo;,
       &amp;lsquo;17&amp;rsquo;, &amp;lsquo;23&amp;rsquo;], dtype=object)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;发现&lt;/strong&gt;：1. 数据是字符串格式；2.含有 ‘-1’，应该是不详。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import numpy as np

vlist = []
for i in epidemic_area_detail_df[&#39;cnt_sum_certain&#39;]:
    if i != &#39;-1&#39;:
        vlist.append(int(i))
    else:
        vlist.append(np.nan)

epidemic_area_detail_df[&#39;cnt_sum_certain&#39;] = vlist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来看一下除掉人数不详的情况，本数据共有多少人确诊：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;np.nansum(vlist)
# 7229.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;确认人数最大值是多少？是哪一个小区？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;epidemic_area_detail_df[epidemic_area_detail_df[&#39;cnt_sum_certain&#39;]==np.nanmax(vlist)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-1bbcca55326970fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;揭晓答案&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Causal Inference: 电子书、代码、数据</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/causal-inferencewhat-if-%E7%94%B5%E5%AD%90%E4%B9%A6%E4%BB%A3%E7%A0%81%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/causal-inferencewhat-if-%E7%94%B5%E5%AD%90%E4%B9%A6%E4%BB%A3%E7%A0%81%E6%95%B0%E6%8D%AE/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-f6dbf120d4032f36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;causal-inference-book&#34;&gt;Causal Inference Book&lt;/h3&gt;

&lt;p&gt;来源：&lt;a href=&#34;https://www.hsph.harvard.edu/miguel-hernan/causal-inference-book/&#34; target=&#34;_blank&#34;&gt;https://www.hsph.harvard.edu/miguel-hernan/causal-inference-book/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Miguel Hernan &amp;amp; Jamie Robinshave written a book that provides a cohesive presentation of concepts of, and methods for, causal inference. Much of this material is currently scattered across journals in several disciplines or confined to technical articles. We expect that the book will be of interest to anyone interested in causal inference, e.g., epidemiologists, statisticians, psychologists, economists, sociologists, political scientists, computer scientists… The book is divided in 3 parts of increasing difficulty: causal inference without models, causal inference with models, and causal inference from complex longitudinal data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hernán MA, Robins JM (2020). Causal Inference: What If. Boca Raton: Chapman &amp;amp; Hall/CRC.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The components of the book can be accessed by clicking on the links below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/2020/02/ci_hernanrobins_21feb20.pdf&#34; target=&#34;_blank&#34;&gt;The Causal Inference book&lt;/a&gt; (updated 21 February 2020)&lt;/li&gt;
&lt;li&gt;NHEFS data

&lt;ul&gt;
&lt;li&gt;In &lt;a href=&#34;https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/2012/10/nhefs_sas.zip&#34; target=&#34;_blank&#34;&gt;SAS&lt;/a&gt;, &lt;a href=&#34;https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/2012/10/nhefs_stata.zip&#34; target=&#34;_blank&#34;&gt;Stata&lt;/a&gt;, &lt;a href=&#34;https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/2017/01/nhefs_excel.zip&#34; target=&#34;_blank&#34;&gt;MS Excel&lt;/a&gt;, and &lt;a href=&#34;https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/1268/20/nhefs.csv&#34; target=&#34;_blank&#34;&gt;CSV&lt;/a&gt; formats&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/2012/10/NHEFS_Codebook.xls&#34; target=&#34;_blank&#34;&gt;Codebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Computer code

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/2019/01/sas_part2.zip&#34; target=&#34;_blank&#34;&gt;SAS&lt;/a&gt; by Roger Logan&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/2019/11/stata_part2.zip&#34; target=&#34;_blank&#34;&gt;Stata&lt;/a&gt; by Eleanor Murray and Roger Logan&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cdn1.sph.harvard.edu/wp-content/uploads/sites/1268/1268/20/Rcode_CIpart2.zip&#34; target=&#34;_blank&#34;&gt;R&lt;/a&gt; by Joy Shi and Sean McGrath. &lt;a href=&#34;https://remlapmot.github.io/cibookex-r/&#34; target=&#34;_blank&#34;&gt;Rendered version&lt;/a&gt; by Tom Palmer.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jrfiedler/causal_inference_python_code&#34; target=&#34;_blank&#34;&gt;Python&lt;/a&gt; by James Fiedler&lt;/li&gt;
&lt;li&gt;Parametric g-formula software in &lt;a href=&#34;https://github.com/CausalInference/gfoRmula&#34; target=&#34;_blank&#34;&gt;R&lt;/a&gt; and &lt;a href=&#34;https://github.com/CausalInference/GFORMULA-SAS&#34; target=&#34;_blank&#34;&gt;SAS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: At this stage, we may still revise and correct errors without documenting the changes. Please make sure you use the most updated version of the book posted here.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Covid-19数据来源（更新当中）</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/covid-19%E6%95%B0%E6%8D%AE%E6%9D%A5%E6%BA%90%E4%B8%8D%E6%96%AD%E6%95%B4%E7%90%86%E5%BD%93%E4%B8%AD/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/covid-19%E6%95%B0%E6%8D%AE%E6%9D%A5%E6%BA%90%E4%B8%8D%E6%96%AD%E6%95%B4%E7%90%86%E5%BD%93%E4%B8%AD/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-2026094daa22ebae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;数据来源&#34;&gt;数据来源&lt;/h1&gt;

&lt;p&gt;不断更新当中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34; target=&#34;_blank&#34;&gt;https://github.com/CSSEGISandData/COVID-19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/data-journalism/WuHan2019nCov&#34; target=&#34;_blank&#34;&gt;https://github.com/data-journalism/WuHan2019nCov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AaronWard/covid-19-analysis&#34; target=&#34;_blank&#34;&gt;https://github.com/AaronWard/covid-19-analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/839-Studio&#34; target=&#34;_blank&#34;&gt;澎湃 839-Studio&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/839-Studio/Noval-Coronavirus-763-Cases&#34; target=&#34;_blank&#34;&gt;Noval-Coronavirus-763-Cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/839-Studio/Novel-Coronavirus-Updates&#34; target=&#34;_blank&#34;&gt;Novel-Coronavirus-Updates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;可视化&#34;&gt;可视化&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vis.pku.edu.cn/ncov/home.html&#34; target=&#34;_blank&#34;&gt;http://vis.pku.edu.cn/ncov/home.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-e0d3a8d954aa5ad5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;538数据新闻项目&#34;&gt;538数据新闻项目&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fivethirtyeight/data&#34; target=&#34;_blank&#34;&gt;fivethirtyeight/data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Covid-19细颗粒度历史数据</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/2019ncov%E7%BB%86%E9%A2%97%E7%B2%92%E5%BA%A6%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/2019ncov%E7%BB%86%E9%A2%97%E7%B2%92%E5%BA%A6%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;epidemic_hist_all()
    NCP细化到地市的细颗粒数据
    &lt;a href=&#34;https://github.com/norratek/Ncov2020HistoryData&#34; target=&#34;_blank&#34;&gt;https://github.com/norratek/Ncov2020HistoryData&lt;/a&gt;
    &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1JNQnFYJpR7PxQo5K5lwXTuE0F6jprhMXuy7DPnV9H90/edit#gid=0&#34; target=&#34;_blank&#34;&gt;https://docs.google.com/spreadsheets/d/1JNQnFYJpR7PxQo5K5lwXTuE0F6jprhMXuy7DPnV9H90/edit#gid=0&lt;/a&gt;
    :return: 返回每日的历史数据
    :rtype: pandas.DataFrame&lt;/pre&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;import akshare as ak
import pylab as plt
plt.style.use(&#39;fivethirtyeight&#39;)

epidemic_hist_all_df = ak.epidemic_hist_all()

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;提取江苏省的历史数据&#34;&gt;提取江苏省的历史数据&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;epidemic_hist_all_df = epidemic_hist_all_df.sort_values(by=&#39;date&#39;)
js = epidemic_hist_all_df[epidemic_hist_all_df[&#39;Province&#39;]==&#39;江苏省&#39;]
js.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-9d77dfc7f7017353.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;江苏历史数据&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;看一下南京市的数据&#34;&gt;看一下南京市的数据&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;plt.figure(figsize=(12, 6), dpi = 200)
i = &#39;南京&#39;
df = js[js[&#39;City&#39;]==i]
plt.plot(df[&#39;date&#39;], df[&#39;Confirmed&#39;],
         &#39;r-s&#39;, label = &#39;累计确诊&#39;)
plt.plot(df[&#39;date&#39;], df[&#39;Cured&#39;],
         &#39;g-o&#39;, label = &#39;累计治愈&#39;)
plt.title(i, fontsize =20)
plt.legend()
# plt.yscale(&#39;log&#39;)
plt.xticks(rotation=60)
plt.ylabel(&#39;数量&#39;, fontsize = 20)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-35ffdf5545111033.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;南京市&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;江苏所有地级市数据&#34;&gt;江苏所有地级市数据&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cols =  [ &#39;#bd2309&#39;, &#39;#bbb12d&#39;, &#39;#1480fa&#39;, &#39;#14fa2f&#39;, &#39;#000000&#39;,
              &#39;#faf214&#39;, &#39;#2edfea&#39;, &#39;#ea2ec4&#39;, &#39;#ea2e40&#39;, &#39;#cdcdcd&#39;,
              &#39;#577a4d&#39;, &#39;#2e46c0&#39;, &#39;#f59422&#39;, &#39;#219774&#39;, &#39;#8086d9&#39; ]

plt.figure(figsize=(12, 6), dpi = 200)
for k, i in enumerate(js[&#39;City&#39;].unique()):
    df = js[js[&#39;City&#39;]==i]
    plt.plot(df[&#39;date&#39;], df[&#39;Confirmed&#39;], color= cols[k], marker=&#39;o&#39;, linestyle=&#39;-&#39;,
              label = i)
plt.title(&#39;江苏省&#39;, fontsize =20)
plt.legend()
# plt.yscale(&#39;log&#39;)
plt.xticks(rotation=60)
plt.ylabel(&#39;累计确诊数量&#39;, fontsize = 20)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-3928a50dae64878b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;江苏所有地级市&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pygame内置小游戏：外星人</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/pygame%E5%86%85%E7%BD%AE%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%A4%96%E6%98%9F%E4%BA%BA/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/pygame%E5%86%85%E7%BD%AE%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%A4%96%E6%98%9F%E4%BA%BA/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-584148e546eaf513.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;pygame 卡哇伊！&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装pygame&#34;&gt;安装pygame&lt;/h2&gt;

&lt;p&gt;首先尝试：
&amp;gt; pip install pygame -i &lt;a href=&#34;http://pypi.douban.com/simple&#34; target=&#34;_blank&#34;&gt;http://pypi.douban.com/simple&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果出错，尝试
&amp;gt; pip install pygame -i &lt;a href=&#34;http://pypi.douban.com/simple&#34; target=&#34;_blank&#34;&gt;http://pypi.douban.com/simple&lt;/a&gt; &amp;ndash;trusted-host pypi.douban.com&lt;/p&gt;

&lt;h2 id=&#34;开始玩游戏&#34;&gt;开始玩游戏！&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.pygame.org/&#34; target=&#34;_blank&#34;&gt;https://www.pygame.org/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;python3 -m pygame.examples.aliens&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-c7cec7899b328580.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;逃跑现场&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;想要学习更多东西&#34;&gt;想要学习更多东西？&lt;/h2&gt;

&lt;p&gt;Below are unofficial tutorials and guides. Anything with wrong install instructions is not allowed.&lt;/p&gt;

&lt;h3 id=&#34;general-tutorials-https-www-pygame-org-wiki-tutorials-general-20tutorials-permalink-to-this-definition&#34;&gt;General Tutorials[](&lt;a href=&#34;https://www.pygame.org/wiki/tutorials#General%20Tutorials&#34; target=&#34;_blank&#34;&gt;https://www.pygame.org/wiki/tutorials#General%20Tutorials&lt;/a&gt; &amp;laquo;Permalink to this definition&amp;raquo;)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dr0id.bitbucket.io/legacy/pygame_tutorials.html&#34; target=&#34;_blank&#34;&gt;Tutorials by DR0ID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pygametutorials.wikidot.com/tutorials-basic&#34; target=&#34;_blank&#34;&gt;PyGame object oriented tutorials&lt;/a&gt; by przemo_li&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thepythongamebook.com/en:pygame:start&#34; target=&#34;_blank&#34;&gt;Thepythongamebook tutorial about Pygame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;pygame-tutorials-on-specific-topics-https-www-pygame-org-wiki-tutorials-pygame-20tutorials-20on-20specific-20topics-permalink-to-this-definition&#34;&gt;Pygame Tutorials on Specific Topics[](&lt;a href=&#34;https://www.pygame.org/wiki/tutorials#Pygame%20Tutorials%20on%20Specific%20Topics&#34; target=&#34;_blank&#34;&gt;https://www.pygame.org/wiki/tutorials#Pygame%20Tutorials%20on%20Specific%20Topics&lt;/a&gt; &amp;laquo;Permalink to this definition&amp;raquo;)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scriptedfun.com/about/&#34; target=&#34;_blank&#34;&gt;Screencasts and tutorials at Scriptedfun&lt;/a&gt;, making an arkanoid type game&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qq.readthedocs.org/&#34; target=&#34;_blank&#34;&gt;A tutorial on making a top-down tile-based game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=7AKatTpNSNQ&amp;amp;list=PLE3D1A71BB598FEF6&#34; target=&#34;_blank&#34;&gt;PyGame Physics Youtube Tutorials&lt;/a&gt; by maaack&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLQVvvaa0QuDdLkP8MrOXLe_rKuf6r80KO&#34; target=&#34;_blank&#34;&gt;YouTube series creating a top down racing game with Python 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>《石头汤》</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E7%9F%B3%E5%A4%B4%E6%B1%A4%E8%A1%8C%E5%8A%A8%E5%92%8C%E5%88%86%E4%BA%AB%E7%9A%84%E5%8A%9B%E9%87%8F/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E7%9F%B3%E5%A4%B4%E6%B1%A4%E8%A1%8C%E5%8A%A8%E5%92%8C%E5%88%86%E4%BA%AB%E7%9A%84%E5%8A%9B%E9%87%8F/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-2100f040addfa8eb.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;幸福原来如此简单&#34; /&gt;&lt;/p&gt;

&lt;p&gt;来源： &lt;a href=&#34;https://mp.sohu.com/profile?xpt=aWU4ODg4ODlAc29odS5jb20=&amp;amp;_f=index_pagemp_1&amp;amp;spm=smpc.content.author.2.15823436662028hdQv9K&#34; target=&#34;_blank&#34;&gt;麦田亲子悦读&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;《石头汤》是凯迪克大奖得主琼·穆特代表作，2007年度全国十佳童书，全数百所知名小学、幼儿园指定必读书！作者琼•穆特以优美恬静的画风在美术及插画创作领域享有盛名，他运用华丽的水彩画，引领读者去深思故事背后的蕴涵。他把自己对禅宗和东方文化的热爱，融入到这个古老的巧计故事当中，以此弘扬慷慨好施的力量。这是一个来自欧洲的古老传说，被各个国家的作者演绎成不同的版本。中国版的《石头汤》作者是一个美国人，但他对中国文化和元素非常的了解，连绘本画风色调都是国画风格，完全符合中国人的审美。&lt;/p&gt;

&lt;h2 id=&#34;这也是一个奇怪的故事&#34;&gt;这也是一个奇怪的故事！&lt;/h2&gt;

&lt;p&gt;石头也能用来煮汤吗？鸡可以煮汤，鸭可以煮汤，冬瓜火腿、番茄和鸡蛋都可以用来煮汤，但石头怎么能煮汤呢？&lt;/p&gt;

&lt;h2 id=&#34;如何摆脱困境&#34;&gt;如何摆脱困境？&lt;/h2&gt;

&lt;p&gt;这个故事说的正是用石头煮汤，三个和尚阿福、阿禄、阿寿在旅行的路途中，边走边聊着猫的胡须、太阳的颜色和一个人怎样才能得到快乐。正说着，他们来到了一个村庄。这是一个历经了很多苦难的村庄，洪水、战争……村民们被折磨得苦不堪言，对世界再也没有信心，对生活丧失了热情，邻居之间彼此猜忌，缺乏信任，更别提陌生人了。这个村庄和石头汤之间产生了什么联系，又发生了什么故事呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-4b74694c18481db3.jpeg&#34; alt=&#34;四处讨饭的和尚&#34; /&gt;&lt;/p&gt;

&lt;p&gt;三个和尚来到村子里，并没有人迎接，反而家家户户门窗紧闭。&lt;/p&gt;

&lt;h1 id=&#34;行动和分享&#34;&gt;行动和分享&lt;/h1&gt;

&lt;p&gt;三个和尚不疾不徐地在一块空地上捡柴火、生火，架起一口锅，开始煮石头汤。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-0addd5e5af30b91e.jpeg&#34; alt=&#34;开始行动&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-8504ea904e99bfd9.jpeg&#34; alt=&#34;让人好奇的石头&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-2b66ff1c8ad84e4f.jpeg&#34; alt=&#34;好奇的女孩&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画面中一直有一位黄衣女孩在关注着和尚们的动向，终于她鼓起勇气去问和尚们在做什么了。和尚们说，他们要煮石头汤，可是这么小的锅，恐怕煮不出很多，于是小女孩自告奋勇地回家取锅。&lt;/p&gt;

&lt;p&gt;这个线索人物——黄衣女孩。黄色更像是一抹阳光，照进了每一个村民心中，驱散了大家心头的阴霾。也是这样一抹阳光，在推动着整个故事向前发展。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-4c958cf59b193d7c.jpeg&#34; alt=&#34;开始行动&#34; /&gt;&lt;/p&gt;

&lt;p&gt;小女孩的母亲很好奇她拿这么大的锅要做什么，小女孩回答：那三个和尚要用大锅来煮石头汤。此言一出，犹如一颗石子投入一池春水，惊起了水花。大家都很好奇，用石头怎么煮汤呢？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;琼·穆特说，书中小女孩衣服的颜色是太阳的颜色。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;怪不得，她看起来那么与众不同。在每个人都紧锁心门时，她没有一点犹豫和怀疑地去信任三个和尚，给了他们最多的帮助。是她带领着村民尝到了石头汤的甜美，品味到了分享带给人的满足。这份单纯美好特别珍贵。其实每个孩子都拥有纯净的心灵，大人所要做的，就是保护好他们内心的纯净。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-52a3dd57b1b09407.jpeg&#34; alt=&#34;蝴蝶效应&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;第一枚多米诺骨牌被推倒了，蝴蝶效应随之发生。大家纷纷走出家门，围观三个和尚煮石头汤。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-9f5e91f126fc5113.jpeg&#34; alt=&#34;一起参与&#34; /&gt;&lt;/p&gt;

&lt;p&gt;三个和尚一边搅动大锅里的水，一边自言自语到，上次我们煮这种材质的石头汤，还放了些盐和胡椒粉，可惜我们没带。于是，就有秀才从自己家里拿来这些调料，接下来不断地又村民从家里拿出食材加入到锅中，锅中的食材越来越多，香气弥散在空中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-92daaec6e7df6117.jpeg&#34; alt=&#34;一起分享&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当一个人付出时，就会有更多人愿意付出。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;村民贡献着自己家的各种食材，一锅材料丰富的石头汤就煮好了，全体村民因着这一锅石头汤，还进行了久违的欢宴。欢宴结束之后，大家争先恐后地邀请三个和尚到自己家里来住。&lt;/p&gt;

&lt;p&gt;和尚感谢村民们的慷慨，而村民们则感谢三个和尚送给他们享用不尽的财富——分享使人更加富足。&lt;/p&gt;

&lt;p&gt;最后，三个和尚留下一句禅语&lt;strong&gt;“幸福就像做石头汤那样简单”&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你知道往哪里走
全世界都会为你让步
如果你知道自己需要什么
行动起来
展示你的作品
大声呐喊
全世界都会愿意帮助你。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>中国经济政策不确定性数据</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%B8%AD%E5%9B%BD%E7%9A%84%E7%BB%8F%E6%B5%8E%E6%94%BF%E7%AD%96%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%B8%AD%E5%9B%BD%E7%9A%84%E7%BB%8F%E6%B5%8E%E6%94%BF%E7%AD%96%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E6%95%B0%E6%8D%AE/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;数据来源：&lt;a href=&#34;http://www.policyuncertainty.com/scmp_monthly.html&#34; target=&#34;_blank&#34;&gt;http://www.policyuncertainty.com/scmp_monthly.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-e5e4f4bc1feddf77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;中国政策不确定性曲线&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import akshare as ak
epu_index_df = ak.article_epu_index(index=&amp;quot;China&amp;quot;)  # 注意单词第一个字母大写
epu_index_df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;文献&#34;&gt;文献&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Baker, Scott, Nicholas Bloom and Steven J. Davis, &lt;a href=&#34;https://academic.oup.com/qje/article/131/4/1593/2468873&#34; target=&#34;_blank&#34;&gt;&amp;laquo;Measuring Economic Policy Uncertainty,&amp;raquo;&lt;/a&gt; Quarterly Journal of Economics, November 2016, Vol 131, Issue 4&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;We develop a new index of economic policy uncertainty (EPU) based on newspaper coverage frequency. Several types of evidence—including human readings of 12,000 newspaper articles—indicate that our index proxies for movements in policy-related economic uncertainty. Our U.S. index spikes near tight presidential elections, Gulf Wars I and II, the &lt;sup&gt;9&lt;/sup&gt;&amp;frasl;&lt;sub&gt;11&lt;/sub&gt; attacks, the failure of Lehman Brothers, the 2011 debt ceiling dispute, and other major battles over fiscal policy. Using firm-level data, we find that policy uncertainty is associated with greater stock price volatility and reduced investment and employment in policy-sensitive sectors like defense, health care, finance, and infrastructure construction. At the macro level, innovations in policy uncertainty foreshadow declines in investment, output, and employment in the United States and, in a panel vector autoregressive setting, for 12 major economies. Extending our U.S. index back to 1900, EPU rose dramatically in the 1930s (from late 1931) and has drifted upward since the 1960s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Baker, Scott, Nicholas Bloom, Steven J. Davis, and Xiaoxi Wang, 2013. &lt;a href=&#34;https://faculty.chicagobooth.edu/steven.davis/pdf/Economic%20Policy%20Uncertainty%20in%20China,%20January%202013.pdf&#34; target=&#34;_blank&#34;&gt;&amp;laquo;Economic Policy Uncertainty in China,&amp;raquo;&lt;/a&gt; unpublished paper, University of Chicago&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>仿真模型表明媒体报道可以遏制传染病扩散</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E8%A1%A8%E6%98%8E%E5%AA%92%E4%BD%93%E6%8A%A5%E9%81%93%E5%8F%AF%E8%83%BD%E9%99%8D%E4%BD%8E%E7%96%AB%E6%83%85%E4%BC%A0%E6%92%AD/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E8%A1%A8%E6%98%8E%E5%AA%92%E4%BD%93%E6%8A%A5%E9%81%93%E5%8F%AF%E8%83%BD%E9%99%8D%E4%BD%8E%E7%96%AB%E6%83%85%E4%BC%A0%E6%92%AD/</guid>
      <description>&lt;p&gt; &lt;/p&gt;

&lt;p&gt;导语：量化模型显示，当媒体的报道量增加十倍，传染病的感染数将会减少33.5％。
 
&amp;gt; Understanding the effect of media on disease spread can help improve epidemic forecasting and uncover preventive measures to slow the spread of disease. Most previously introduced models have approximated media effect through disease incidence, making media influence dependent on the size of epidemic. We propose an alternative approach, which relies on &lt;strong&gt;real data about disease coverage in the news&lt;/strong&gt;, allowing us to model low incidence/high interest diseases, such as SARS, Ebola or H1N1. &lt;strong&gt;We introduce a network-based model&lt;/strong&gt;, in which disease is transmitted through local interactions between individuals and &lt;em&gt;the probability of transmission is affected by media coverage&lt;/em&gt;. We assume that media attention increases self-protection (e.g. hand washing and compliance with social distancing), which, in turn, decreases disease model. &lt;strong&gt;We apply the model to the case of H1N1 transmission in Mexico City in 2009&lt;/strong&gt; and show how media influence—measured by the time series of the weekly count of news articles published on the outbreak—helps to explain the observed transmission dynamics. We show that incorporating the media attention based on the observed media coverage of the outbreak better estimates the disease dynamics from what would be predicted by using media function that approximate the media impact using the number of cases and rate of spread. &lt;strong&gt;Finally, we apply the model to a typical influenza season in Washington, DC&lt;/strong&gt; and estimate how the transmission pattern would have changed given different levels of media coverage.&lt;/p&gt;

&lt;p&gt;Louis Kim ,Shannon M. Fast, Natasha Markuzon. Incorporating media data into a model of infectious disease transmission. PloS ONE. February 4, 2019. &lt;a href=&#34;https://doi.org/10.1371/journal.pone.0197646&#34; target=&#34;_blank&#34;&gt;https://doi.org/10.1371/journal.pone.0197646&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;华盛顿大学的Louis Kim教授和Shannon M. Fast, Natasha Markuzon几位科学家做过一个有意思的研究，观察媒体报道的数量与疾病传播数量之间的关系。这其中的原理在于，疾病的传播是在动态的社会活动中发生的，所以个人行动对传播有着重要的影响。媒体报道多了，大家的防范意识增强了，疾病的传播速度就会减缓。Louis Kim教授等的模型显示，当媒体的报道量增加十倍，此类疾病的感染数减少33.5％。因此，媒体可能是预防疾病传播的一个有效手段。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;建立研究模型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Louis Kim教授等建立了一个疾病传播模型，并在该模型中加入了对媒体报道的量化，展现媒体报道数量和传染病例数量之间的关系。该模型分为两部分，第一部分量化疾病传播概率，第二部分量化媒体的影响力。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（1）量化疾病传播概率&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Louis Kim教授等使用了易感-感染-康复（SIR）模型来展现疾病传播的概率。SIR模型专门模拟个人直接相互感染的情况，而非通过诸如蚊子之类的疾病媒介相互感染的情况。SIR对三种状态之间的人员流动进行建模：易感（S），感染（I）和康复（R）。这些变量代表每组中的人数。每个人在时间t的状态都由X表示。在时间t，受感染的个体以概率p（t）感染他身边的易感个体i和j。因此，如果&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-ed8515043a6a2114?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-75cc092ca83dadb1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;则：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-29b81165ac9497ae?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt; 感染后，个体在T（R）时间段后恢复。因此，如果 &lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-c83500be06bef8d8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt; 并且 &lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-54038a164174cb5d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;则:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-8372b9c2e8ab6186?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果考虑到疫苗的作用，并在疫苗在注射后要等d时间才生效。设η为疫苗效力。 然后，如果易感人i在时间t接种了疫苗，则： &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-5a75bb22b2a955a8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）量化媒体报道的影响力&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个研究假设媒体对疫情的关注会增加民众的自我保护行为，例如洗手，使用口罩和遵守社交隔离，从而减少疾病传播。具体来说，将时间t的每次接触传播概率定义为上述提到的疾病传播概率p（0）和媒体函数g的乘积： &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-2e267bd8d679f558?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中Mt是在时间t发布的新闻报道的数量；α是由媒体对传染概率带来的影响；λ指最近媒体宣传信息的权重。媒体函数g，会随着新闻文章数量的增加而减小，这意味着当最近有许多关于该疾病的文章发表时，疾病的传播速度会减慢。 &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-abe9e300b97d7734?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这其中的θ为新闻文章数量的指数加权移动平均值，假设发表的文章会继续影响当前行为，但影响程度会随着时间而降低。令θt为新闻文章数量的指数加权移动平均值，参数λ∈（0，1]，代表最近和之前报道数量的权重：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-16aed4bf1232f352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;墨西哥城案例和华盛顿特区案例&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Louis Kim教授等使用了两个实际案例，并把其中真实的媒体报道数据纳入了的疾病传播的模型。Louis Kim教授等发现，在疾病传播模型中，加入媒体报道数量的变量后，模型呈现出的结果和现实十分贴近。这两个案例分别是2009年墨西哥H1N1病毒的爆发，以及2014-2015年华盛顿特区2014-2015年的流感季。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（1）墨西哥城案例&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2009年，墨西哥城爆发了两次H1N1流感。第一次是在4月中旬开始的。爆发规模较小，并通过社交隔离和公共宣传活动，迅速得到了控制。第二次爆发始于8月，传播范围比第一次爆发更为广泛。春季疫情的爆发引起了媒体的强烈关注，而秋季疫情的报道则相对较少。由于在春季和秋季爆发之间，H1N1病毒的感染力以及墨西哥城的社会结构，都不会发生很大的变化，因此需要通过媒体报道的差异来解释传染规模之间的差异。在该模型中，Louis Kim教授等使用上述提到的模型对春季和秋季疫情的爆发进行了模拟。H1N1的每周流感病例数的数据由墨西哥社会保障研究所提供。因为H1N1疫苗要到2009年11月下旬才面世，无法对墨西哥的疾病传播产生重大影响，所以在此分析中未考虑疫苗的接种。互联网生物监视公司HealthMap收集了在线发布的、专门提到了墨西哥城的H1N1流感爆发的文章。Louis Kim教授等发现在墨西哥城爆发的春季H1N1疫情引起了媒体的强烈兴趣。在6月1日之前，HealthMap收集了815篇突发新闻文章，从4月22日到6月1日，每天约有20篇文章。而秋季疫情中的文章数量则少很多。在9月17日至12月6日之间，HealthMap收集了66篇已发表的文章，每天少于1篇文章。可以看出，春季爆发期间由于媒体的覆盖激增，使得民众采取的保护措施，从而减缓疾病传播的速度。相比之下，秋季疫情几乎没有受到抑制，没有引起媒体的广泛关注。Louis Kim教授等使用上述加入了媒体报道变量的模型，模拟墨西哥城春季、秋季疫情的发病人数，发现模型对真实情况模拟的非常贴近，加权平均绝对误差为1243例。下图中红线是模型做出的每周病例数，黑线是真实的病例数。二者有着很好的重叠。 &lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-f380e766284aa04a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）华盛顿特区案例&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;华盛顿特区2014-2015年曾爆发严重的流感疫情，美国每10万人中有51.4人因流感住院。Louis Kim教授等使用了和墨西哥城案例相似的研究方法，2014-2015年流感季节每周新的A型流感住院病例数可以从华盛顿特区卫生部获得。疫情的媒体覆盖面有限。每周的新闻文章数量在流感季节的高峰期达到顶峰，截至2015年1月1日当周收集了25篇文章。Louis Kim教授等将模型模拟出的病例数与华盛顿特区2014-2015年流感季的真实病例数进行了对比，发现加权平均绝对误差为2818例。华盛顿特区的案例表明，由于发表的新闻报道数量很少，因此媒体在2014-2015年华盛顿特区的流感季节对行为的影响有限。但是如果在模拟中，把每周新闻数量增加十倍时，媒体就会发挥更大的作用，传染病例数会减少33.5％。左图中红线是模型做出的每周病例数，黑线是真实的病例数。二者的重叠度一般，因为媒体报道的数量比较小。右图中的红线是实际的媒体报道数量，绿线是无媒体的作用，蓝线是把媒体报道数量增加十倍。右图模型显示，当媒体报道数量增加十倍时，传染病例数会减少33.5％。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-39ef0db572508464?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Louis Kim教授等的研究表明，一方面，可以使用媒体报道的数量来模拟预测传染病的案例数，模型的准确度会随着媒体报道数量的增加而增加。另一方面，媒体报道对疫情覆盖的增加会减缓疾病的传播。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-58a515d5d0fdd0cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;media effect&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用akshare分析covid19微博指数</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BD%BF%E7%94%A8akshare%E5%88%86%E6%9E%902019ncov%E7%96%AB%E6%83%85%E5%BE%AE%E5%8D%9A%E6%8C%87%E6%95%B0/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BD%BF%E7%94%A8akshare%E5%88%86%E6%9E%902019ncov%E7%96%AB%E6%83%85%E5%BE%AE%E5%8D%9A%E6%8C%87%E6%95%B0/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&#34;akshare&#34;&gt;AkShare&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;AkShare 是基于 Python 的开源金融数据接口库, 目的是实现对股票, 期货, 期权, 基金, 外汇, 债券, 指数, 数字货币等金融产品的基本面数据、实时和历史行情数据、衍生数据从数据采集, 数据清洗, 到数据落地的一套开源工具, 满足金融数据科学家, 数据科学爱好者在金融数据获取方面的需求.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AkShare 的特点是获取的是相对权威的金融数据网站公布的原始数据, 广大数据科学家可以利用原始数据进行各数据源之间的交叉验证, 进而再加工, 从而得出科学的结论.&lt;/p&gt;

&lt;p&gt;针对新型冠状病毒肺炎疫情，akshare开发了事件接口，链接如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://akshare.readthedocs.io/zh_CN/latest/data/event/event.html&#34; target=&#34;_blank&#34;&gt;https://akshare.readthedocs.io/zh_CN/latest/data/event/event.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;pip install akshare  --upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于国内用户anaconda使用者，推荐使用以下方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install akshare -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host=mirrors.aliyun.com  --user  --upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import akshare as ak
import pylab as plt
import pandas as pd
import seaborn as sns

# 提取数据
df_index4 = ak.weibo_index(word=&amp;quot;武汉&amp;quot;, time_type=&amp;quot;3month&amp;quot;)
df_index6 = ak.weibo_index(word=&amp;quot;CDC&amp;quot;, time_type=&amp;quot;3month&amp;quot;)
df_index7 = ak.weibo_index(word=&amp;quot;钟南山&amp;quot;, time_type=&amp;quot;3month&amp;quot;)
df_index5 = ak.weibo_index(word=&amp;quot;疫情&amp;quot;, time_type=&amp;quot;3month&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，使用matplotlib进行可视化。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plt.figure(figsize=(12, 6), dpi = 200)
plt.style.use(&#39;fivethirtyeight&#39;)
plt.plot(df_index4.index, df_index4, label = &#39;武汉&#39;, alpha = 0.5)
plt.plot(df_index5.index, df_index5, label = &#39;疫情&#39;, alpha = 0.5)
plt.plot(df_index6.index, df_index6, label = &#39;CDC&#39;, alpha = 0.5)
plt.plot(df_index7.index, df_index7, label = &#39;钟南山&#39;, alpha = 0.5)
plt.legend()
plt.yscale(&#39;log&#39;)
plt.xticks(rotation=60)
plt.ylabel(&#39;微博指数&#39;, fontsize = 20)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-7c55a921745a82e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;微博指数&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;练习&#34;&gt;练习&lt;/h2&gt;

&lt;p&gt;绘制下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-d9e561a784f805af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;江苏和南京&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用python模拟传染病模型</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BD%BF%E7%94%A8python%E6%A8%A1%E6%8B%9F%E4%BC%A0%E6%9F%93%E7%97%85%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BD%BF%E7%94%A8python%E6%A8%A1%E6%8B%9F%E4%BC%A0%E6%9F%93%E7%97%85%E6%A8%A1%E5%9E%8B/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/people/doraemon-63-82&#34; target=&#34;_blank&#34;&gt;Doraemon&lt;/a&gt;：本文尝试使用python对经典传染病模型进行实现，因传染病模型研究属于传染病动力学研究方向，不是本人的工作范围，因此，本人只是将模型中的微分方程，用Python进行实现，想起到抛砖引玉的效果。来源： &lt;a href=&#34;https://zhuanlan.zhihu.com/p/104091330&#34; target=&#34;_blank&#34;&gt;https://zhuanlan.zhihu.com/p/104091330&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;si模型&#34;&gt;SI模型&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import scipy.integrate as spi
import numpy as np
import matplotlib.pyplot as plt

# N为人群总数
N = 10000
# β为传染率系数
beta = 0.25
# gamma为恢复率系数
gamma = 0
# I_0为感染者的初始人数
I_0 = 1
# S_0为易感者的初始人数
S_0 = N - I_0
# T为传播时间
T = 150

# INI为初始状态下的数组
INI = (S_0,I_0)


def funcSI(inivalue,_):
    Y = np.zeros(2)
    X = inivalue
    # 易感个体变化
    Y[0] = - (beta * X[0] * X[1]) / N + gamma * X[1]
    # 感染个体变化
    Y[1] = (beta * X[0] * X[1]) / N - gamma * X[1]
    return Y

T_range = np.arange(0,T + 1)

RES = spi.odeint(funcSI,INI,T_range)


plt.plot(RES[:,0],color = &#39;darkblue&#39;,label = &#39;Susceptible&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,1],color = &#39;red&#39;,label = &#39;Infection&#39;,marker = &#39;.&#39;)
plt.title(&#39;SI Model&#39;)
plt.legend()
plt.xlabel(&#39;Day&#39;)
plt.ylabel(&#39;Number&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-488036d063686873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;sis模型&#34;&gt;SIS模型&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import scipy.integrate as spi
import numpy as np
import matplotlib.pyplot as plt

# N为人群总数
N = 10000
# β为传染率系数
beta = 0.25
# gamma为恢复率系数
gamma = 0.05
# I_0为感染者的初始人数
I_0 = 1
# S_0为易感者的初始人数
S_0 = N - I_0
# T为传播时间
T = 150

# INI为初始状态下的数组
INI = (S_0,I_0)


def funcSIS(inivalue,_):
    Y = np.zeros(2)
    X = inivalue
    # 易感个体变化
    Y[0] = - (beta * X[0]) / N * X[1] + gamma * X[1]
    # 感染个体变化
    Y[1] = (beta * X[0] * X[1]) / N - gamma * X[1]
    return Y

T_range = np.arange(0,T + 1)

RES = spi.odeint(funcSIS,INI,T_range)


plt.plot(RES[:,0],color = &#39;darkblue&#39;,label = &#39;Susceptible&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,1],color = &#39;red&#39;,label = &#39;Infection&#39;,marker = &#39;.&#39;)
plt.title(&#39;SIS Model&#39;)
plt.legend()
plt.xlabel(&#39;Day&#39;)
plt.ylabel(&#39;Number&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-4160f1f9056e1d01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;sir模型&#34;&gt;SIR模型&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import scipy.integrate as spi
import numpy as np
import matplotlib.pyplot as plt

# N为人群总数
N = 10000
# β为传染率系数
beta = 0.25
# gamma为恢复率系数
gamma = 0.05
# I_0为感染者的初始人数
I_0 = 1
# R_0为治愈者的初始人数
R_0 = 0
# S_0为易感者的初始人数
S_0 = N - I_0 - R_0
# T为传播时间
T = 150

# INI为初始状态下的数组
INI = (S_0,I_0,R_0)


def funcSIR(inivalue,_):
    Y = np.zeros(3)
    X = inivalue
    # 易感个体变化
    Y[0] = - (beta * X[0] * X[1]) / N
    # 感染个体变化
    Y[1] = (beta * X[0] * X[1]) / N - gamma * X[1]
    # 治愈个体变化
    Y[2] = gamma * X[1]
    return Y

T_range = np.arange(0,T + 1)

RES = spi.odeint(funcSIR,INI,T_range)


plt.plot(RES[:,0],color = &#39;darkblue&#39;,label = &#39;Susceptible&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,1],color = &#39;red&#39;,label = &#39;Infection&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,2],color = &#39;green&#39;,label = &#39;Recovery&#39;,marker = &#39;.&#39;)
plt.title(&#39;SIR Model&#39;)
plt.legend()
plt.xlabel(&#39;Day&#39;)
plt.ylabel(&#39;Number&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-157f138dbba55f49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;seir模型&#34;&gt;SEIR模型&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import scipy.integrate as spi
import numpy as np
import pylab as plt

# N为人群总数
N = 10000
# β为传染率系数
beta = 0.6
# gamma为恢复率系数
gamma = 0.1
# Te为疾病潜伏期
Te = 14
# I_0为感染者的初始人数
I_0 = 1
# E_0为潜伏者的初始人数
E_0 = 0
# R_0为治愈者的初始人数
R_0 = 0
# S_0为易感者的初始人数
S_0 = N - I_0 - E_0 - R_0
# T为传播时间
T = 150

# INI为初始状态下的数组
INI = (S_0,E_0,I_0,R_0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def funcSEIR(inivalue,_):
    Y = np.zeros(4)
    X = inivalue
    # 易感个体变化
    Y[0] = - (beta * X[0] * X[2]) / N
    # 潜伏个体变化
    Y[1] = (beta * X[0] * X[2]) / N - X[1] / Te
    # 感染个体变化
    Y[2] = X[1] / Te - gamma * X[2]
    # 治愈个体变化
    Y[3] = gamma * X[2]
    return Y

T_range = np.arange(0,T + 1)
RES = spi.odeint(funcSEIR,INI,T_range)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(RES[:,0],color = &#39;darkblue&#39;,label = &#39;Susceptible&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,1],color = &#39;orange&#39;,label = &#39;Exposed&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,2],color = &#39;red&#39;,label = &#39;Infection&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,3],color = &#39;green&#39;,label = &#39;Recovery&#39;,marker = &#39;.&#39;)

plt.title(&#39;SEIR Model&#39;)
plt.legend()
plt.xlabel(&#39;Day&#39;)
plt.ylabel(&#39;Number&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-1c8fc98ac55a253e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;seirs模型&#34;&gt;SEIRS模型&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import scipy.integrate as spi
import numpy as np
import matplotlib.pyplot as plt

# N为人群总数
N = 10000
# β为传染率系数
beta = 0.6
# gamma为恢复率系数
gamma = 0.1
# Ts为抗体持续时间
Ts = 7
# Te为疾病潜伏期
Te = 14
# I_0为感染者的初始人数
I_0 = 1
# E_0为潜伏者的初始人数
E_0 = 0
# R_0为治愈者的初始人数
R_0 = 0
# S_0为易感者的初始人数
S_0 = N - I_0 - E_0 - R_0
# T为传播时间
T = 150

# INI为初始状态下的数组
INI = (S_0,E_0,I_0,R_0)


def funcSEIRS(inivalue,_):
    Y = np.zeros(4)
    X = inivalue
    # 易感个体变化
    Y[0] = - (beta * X[0] * X[2]) / N + X[3] / Ts
    # 潜伏个体变化
    Y[1] = (beta * X[0] * X[2]) / N - X[1] / Te
    # 感染个体变化
    Y[2] = X[1] / Te - gamma * X[2]
    # 治愈个体变化
    Y[3] = gamma * X[2] - X[3] / Ts
    return Y

T_range = np.arange(0,T + 1)

RES = spi.odeint(funcSEIRS,INI,T_range)


plt.plot(RES[:,0],color = &#39;darkblue&#39;,label = &#39;Susceptible&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,1],color = &#39;orange&#39;,label = &#39;Exposed&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,2],color = &#39;red&#39;,label = &#39;Infection&#39;,marker = &#39;.&#39;)
plt.plot(RES[:,3],color = &#39;green&#39;,label = &#39;Recovery&#39;,marker = &#39;.&#39;)

plt.title(&#39;SEIRS Model&#39;)
plt.legend()
plt.xlabel(&#39;Day&#39;)
plt.ylabel(&#39;Number&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-1708ded28e6acb24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;推荐大家阅读Albert-Laszlo Barabasi的书&lt;a href=&#34;http://barabasi.com/networksciencebook/chapter/1&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;&lt;em&gt;Network Science&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;，大家可以在如下网站直接阅读传染病模型这一章：&lt;a href=&#34;http://barabasi.com/networksciencebook/chapter/10#contact-networks&#34; target=&#34;_blank&#34;&gt;http://barabasi.com/networksciencebook/chapter/10#contact-networks&lt;/a&gt;。有两个Hypothesis：1,Compartmentalization; 2, Homogenous Mixing。具体看教材。默认条件：1, closed population; 2, no births; 3, no deaths; 4, no migrations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用python玩飞机大战游戏</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BD%BF%E7%94%A8python%E7%8E%A9%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BD%BF%E7%94%A8python%E7%8E%A9%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98%E6%B8%B8%E6%88%8F/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&#34;安装pygame&#34;&gt;安装pygame&lt;/h2&gt;

&lt;p&gt;首先尝试：
&amp;gt; pip install pygame -i &lt;a href=&#34;http://pypi.douban.com/simple&#34; target=&#34;_blank&#34;&gt;http://pypi.douban.com/simple&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果出错，尝试
&amp;gt; pip install pygame -i &lt;a href=&#34;http://pypi.douban.com/simple&#34; target=&#34;_blank&#34;&gt;http://pypi.douban.com/simple&lt;/a&gt; &amp;ndash;trusted-host pypi.douban.com&lt;/p&gt;

&lt;h2 id=&#34;下载游戏代码&#34;&gt;下载游戏代码&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/computational-class/aircraftbattle&#34; target=&#34;_blank&#34;&gt;https://github.com/computational-class/aircraftbattle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;推荐使用Github Desktop下载到本机，例如我放在/github/aircraftbattle文件夹当中。&lt;/p&gt;

&lt;h2 id=&#34;运行游戏&#34;&gt;运行游戏&lt;/h2&gt;

&lt;p&gt;在terminal当中打开游戏所在文件夹（&lt;strong&gt;注意&lt;/strong&gt;：根据你的本地文件所在位置）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cd github/aircraftbattle&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-3b6a7888d729c946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;terminal&#34; /&gt;&lt;/p&gt;

&lt;p&gt;运行aircraftbattle.py&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;python aircraftbattle.py&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;enjoy-your-game&#34;&gt;Enjoy your game!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-2b63fcfc01978124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;飞机大战游戏&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;想要理解背后的代码&#34;&gt;想要理解背后的代码&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/av14184325?p=461&#34; target=&#34;_blank&#34;&gt;https://www.bilibili.com/video/av14184325?p=461&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#导入模块
import pygame
import random
from pygame.locals import *
from os import path

#######################################基本参数配置#######################################

#获取图片库和声音库路径
img_dir = path.join(path.dirname(__file__),&#39;pic&#39;)
sound_folder = path.join(path.dirname(__file__),&#39;sounds&#39;)

#定义游戏窗口、玩家血量条尺寸，游戏运行速度、炮火持续时间等参数
WIDTH = 480
HEIGHT = 600
FPS = 60
POWERUP_TIME = 5000
BAR_LENGTH = 100
BAR_HEIGHT = 10

#定义白、黑、红、绿、蓝、黄的RGB参数
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

#初始化pygame模块，创建游戏窗口、游戏窗口命名、创建跟踪时间对象
pygame.init()
pygame.mixer.init()  #初始化音效
screen = pygame.display.set_mode((WIDTH,HEIGHT))
pygame.display.set_caption(&amp;quot;Aircraft Battle&amp;quot;)
clock = pygame.time.Clock()

#定义文本字体
font_name = pygame.font.match_font(&#39;arial&#39;)

#######################################加载图片#######################################

#加载游戏进行中背景图片
background = pygame.image.load(path.join(img_dir,&#39;starfield.png&#39;)).convert()
background = pygame.transform.scale(background,(WIDTH,1536))
height = -936

#加载玩家图片
player_img = pygame.image.load(path.join(img_dir,&#39;player.png&#39;)).convert()
player_mini_img = pygame.transform.scale(player_img,(25, 19))
player_mini_img.set_colorkey(BLACK)

#加载玩家炮弹、导弹图片
bullet_img = pygame.image.load(path.join(img_dir,&#39;bullet.png&#39;)).convert()
missile_img = pygame.image.load(path.join(img_dir,&#39;missile.png&#39;)).convert_alpha()

#加载敌机炮弹图片
enemies_bullet_img = pygame.image.load(path.join(img_dir,&#39;enemies_bullet.png&#39;)).convert()

#加载盾牌、闪电图片
powerup_images = {}
powerup_images[&#39;shield&#39;] = pygame.image.load(path.join(img_dir, &#39;shield.png&#39;)).convert()
powerup_images[&#39;gun&#39;] = pygame.image.load(path.join(img_dir, &#39;bolt.png&#39;)).convert()

#加载敌机和火山石图片
enemies_images = []
lava_images = []
#敌机
enemies_list = [
    &#39;enemies1.png&#39;,
    &#39;enemies2.png&#39;,
    &#39;enemies3.png&#39;
]
#火山石
lava_list = [
    &#39;lava_med.png&#39;,
    &#39;lava_small1.png&#39;,
    &#39;lava_small2.png&#39;,
    &#39;lava_tiny.png&#39;
]
for image in enemies_list:
    enemies_img = pygame.image.load(path.join(img_dir,image)).convert()
    enemies_img = pygame.transform.scale(enemies_img,(80, 60))
    enemies_images.append(enemies_img)
for image in lava_list:
    lava_images.append(pygame.image.load(path.join(img_dir,image)).convert())

#加载爆炸图片
explosion_anim = {}
explosion_anim[&#39;lg&#39;] = []
explosion_anim[&#39;sm&#39;] = []
explosion_anim[&#39;player&#39;] = []
for i in range(9):
    #敌机、火山石爆炸
    filename = &#39;regularExplosion0{}.png&#39;.format(i)
    img = pygame.image.load(path.join(img_dir,filename)).convert()
    img.set_colorkey(BLACK)
    #大爆炸    
    img_lg = pygame.transform.scale(img,(75,75))
    explosion_anim[&#39;lg&#39;].append(img_lg)
    #小爆炸
    img_sm = pygame.transform.scale(img,(32,32))
    explosion_anim[&#39;sm&#39;].append(img_sm)
    #玩家爆炸
    filename = &#39;sonicExplosion0{}.png&#39;.format(i)
    img = pygame.image.load(path.join(img_dir,filename)).convert()
    img.set_colorkey(BLACK)
    explosion_anim[&#39;player&#39;].append(img)

#######################################加载声音#######################################

#加载炮弹、导弹发射声音
shooting_sound = pygame.mixer.Sound(path.join(sound_folder,&#39;pew.wav&#39;))
missile_sound = pygame.mixer.Sound(path.join(sound_folder,&#39;rocket.ogg&#39;))

#加载敌机、火山石爆炸声音
expl_sounds = []
for sound in [&#39;expl3.wav&#39;, &#39;expl6.wav&#39;]:
    expl_sounds.append(pygame.mixer.Sound(path.join(sound_folder,sound)))
#调低音量
pygame.mixer.music.set_volume(0.2)

#加载玩家爆炸声音
player_die_sound = pygame.mixer.Sound(path.join(sound_folder,&#39;rumble1.ogg&#39;))

#######################################函数区#######################################

#游戏初始界面和准备开始界面函数
def main_menu():
    global screen
    #加载游戏初始界面背景音乐
    menu_song = pygame.mixer.music.load(path.join(sound_folder,&amp;quot;menu.ogg&amp;quot;))
    #循环播放
    pygame.mixer.music.play(-1)
    #加载游戏初始界面背景图片
    title = pygame.image.load(path.join(img_dir,&amp;quot;main.png&amp;quot;)).convert()
    title = pygame.transform.scale(title,(WIDTH, HEIGHT),screen)
    screen.blit(title,(0,0))
    pygame.display.update()
    #检测玩家操作事件
    while True:
        ev = pygame.event.poll()
        if ev.type == pygame.KEYDOWN:
            if ev.key == pygame.K_RETURN:
                break
        elif ev.type == pygame.QUIT:
                pygame.quit()
                quit()
        else:
            draw_text(screen, &amp;quot;Press [ENTER] To Begin&amp;quot;, 30, WIDTH/2, HEIGHT/2)
            draw_text(screen, &amp;quot;[A] ←  [S] ↓  [D] →  [W] ↑&amp;quot;, 30, WIDTH/2, 2*HEIGHT/3)
            draw_text(screen, &amp;quot;[Space] fire&amp;quot;, 30, WIDTH/2, 3*HEIGHT/4)           
            pygame.display.update()
    #加载准备声音
    ready = pygame.mixer.Sound(path.join(sound_folder,&#39;getready.ogg&#39;))
    ready.play()
    #加载准备开始界面背景颜色和文本
    screen.fill(BLACK)
    draw_text(screen, &amp;quot;GET READY!&amp;quot;, 40, WIDTH/2, HEIGHT/3)
    pygame.display.update()

#设置文本属性函数
def draw_text(surf,text,size,x,y):
    #定义文本参数
    font = pygame.font.Font(font_name,size)
    text_surface = font.render(text,True,WHITE)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x,y)
    surf.blit(text_surface,text_rect)

#设置玩家血量条属性函数
def draw_shield_bar(surf,x,y,pct):
    pct = max(pct,0)
    fill = (pct/100)*BAR_LENGTH
    outline_rect = pygame.Rect(x,y,BAR_LENGTH,BAR_HEIGHT)
    fill_rect = pygame.Rect(x,y,fill,BAR_HEIGHT)
    pygame.draw.rect(surf,GREEN,fill_rect)
    pygame.draw.rect(surf,WHITE,outline_rect,2)

#设置玩家生命数量属性函数
def draw_lives(surf,x,y,lives,img):
    for i in range(lives):
        img_rect = img.get_rect()
        img_rect.x = x+30*i
        img_rect.y = y
        surf.blit(img,img_rect)

#添加敌机函数
def newmob():
    mob_element = Mob()
    all_sprites.add(mob_element)
    mobs.add(mob_element)

#添加火山石函数
def newlava():
    lava_element = Lava()
    all_sprites.add(lava_element)
    lavas.add(lava_element)

#######################################类区#######################################

class Explosion(pygame.sprite.Sprite):
    &#39;&#39;&#39;创建爆炸类&#39;&#39;&#39;
    def __init__(self,center,size):
        pygame.sprite.Sprite.__init__(self)
        self.size = size
        self.image = explosion_anim[self.size][0]
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.frame = 0
        self.last_update = pygame.time.get_ticks()
        self.frame_rate = 75

    def update(self):        
        now = pygame.time.get_ticks()
        if now - self.last_update &amp;gt; self.frame_rate:
            self.last_update = now
            self.frame += 1
            if self.frame == len(explosion_anim[self.size]):
                self.kill()
            else:
                center = self.rect.center
                self.image = explosion_anim[self.size][self.frame]
                self.rect = self.image.get_rect()
                self.rect.center = center

class Player(pygame.sprite.Sprite):
    &#39;&#39;&#39;创建玩家类&#39;&#39;&#39;
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(player_img,(50, 38))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.radius = 20
        self.rect.centerx = WIDTH/2
        self.rect.bottom = HEIGHT-10
        self.speedx = 0
        self.speedy = 0
        self.shield = 100
        self.shoot_delay = 250
        self.last_shot = pygame.time.get_ticks()
        self.lives = 3
        self.hidden = False
        self.hide_timer = pygame.time.get_ticks()
        self.power = 1
        self.power_timer = pygame.time.get_ticks()

    def update(self):
        if self.power &amp;gt;= 2 and pygame.time.get_ticks() - self.power_time &amp;gt; POWERUP_TIME:
            self.power -= 1
            self.power_time = pygame.time.get_ticks()
        if self.hidden and pygame.time.get_ticks() - self.hide_timer &amp;gt; 1000:
            self.hidden = False
            self.rect.centerx = WIDTH/2
            self.rect.bottom = HEIGHT-30
        self.speedx = 0
        self.speedy = 0
        #方向控制：A控制左、D控制右、W控制上、S控制下、A+W控制左上、A+S控制左下、D+W控制右上、D+S控制右下
        keystate = pygame.key.get_pressed()
        if keystate[K_a]:
            self.speedx = -5
        if keystate[K_d]:
            self.speedx = 5
        if keystate[K_w]:
            self.speedy = -5
        if keystate[K_s]:
            self.speedy = 5
        #发射控制：空格
        if keystate[pygame.K_SPACE]:
            self.shoot()
        #设置玩家移动边界
        if self.rect.right &amp;gt; WIDTH:
            self.rect.right = WIDTH
        if self.rect.left &amp;lt; 0:
            self.rect.left = 0
        if self.rect.top &amp;lt; 10:
            self.rect.top = 10
        if self.rect.bottom &amp;gt; HEIGHT-10:
            self.rect.bottom = HEIGHT-10
        self.rect.x += self.speedx
        self.rect.y += self.speedy

    def shoot(self):
        now = pygame.time.get_ticks()
        if now-self.last_shot &amp;gt; self.shoot_delay:
            self.last_shot = now
            #单火力
            if self.power == 1:
                bullet = Bullet(self.rect.centerx, self.rect.top)
                all_sprites.add(bullet)
                bullets.add(bullet)
                shooting_sound.play()
            #双火力
            if self.power == 2:
                bullet1 = Bullet(self.rect.left, self.rect.centery)
                bullet2 = Bullet(self.rect.right, self.rect.centery)
                all_sprites.add(bullet1)
                all_sprites.add(bullet2)
                bullets.add(bullet1)
                bullets.add(bullet2)
                shooting_sound.play()
            #三火力
            if self.power &amp;gt;= 3:
                bullet1 = Bullet(self.rect.left, self.rect.centery)
                bullet2 = Bullet(self.rect.right, self.rect.centery)
                missile1 = Missile(self.rect.centerx, self.rect.top) # 导弹
                all_sprites.add(bullet1)
                all_sprites.add(bullet2)
                all_sprites.add(missile1)
                bullets.add(bullet1)
                bullets.add(bullet2)
                bullets.add(missile1)
                shooting_sound.play()
                missile_sound.play()

    def powerup(self):
        self.power += 1
        self.power_time = pygame.time.get_ticks()

    def hide(self):
        self.hidden = True
        self.hide_timer = pygame.time.get_ticks()
        self.rect.center = (WIDTH/2, HEIGHT+200)

class Mob(pygame.sprite.Sprite):
    &#39;&#39;&#39;创建敌机类&#39;&#39;&#39;
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image_orig = random.choice(enemies_images)
        self.image_orig.set_colorkey(BLACK)
        self.image = self.image_orig.copy()
        self.rect = self.image.get_rect()
        self.radius = int(self.rect.width*.90/2)
        self.rect.x = random.randrange(0, WIDTH-self.rect.width)
        self.rect.y = random.randrange(-150,-100)       
        self.speedy = random.randrange(5,10)
        self.speedx = random.randrange(-3,3)
        self.shoot_delay = 1000
        self.last_shot = pygame.time.get_ticks()        

    def update(self):
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        if random.randrange(10) &amp;gt;= 6:
            self.enemies_shoot()        
        if (self.rect.top &amp;gt; HEIGHT+10) or (self.rect.left &amp;lt; -25) or (self.rect.right &amp;gt; WIDTH+20):
            self.rect.x = random.randrange(0,WIDTH-self.rect.width)
            self.rect.y = random.randrange(-100,-40)
            self.speedy = random.randrange(1,8)

    def enemies_shoot(self):
        now = pygame.time.get_ticks()
        if now-self.last_shot &amp;gt; self.shoot_delay:
            self.last_shot = now
            enemies_bullet = EnemiesBullet(self.rect.centerx, self.rect.bottom)
            all_sprites.add(enemies_bullet)
            enemies_bullets.add(enemies_bullet)
            shooting_sound.play()

class Lava(pygame.sprite.Sprite):
    &#39;&#39;&#39;创建火山石类&#39;&#39;&#39;
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image_orig = random.choice(lava_images)
        self.image_orig.set_colorkey(BLACK)
        self.image = self.image_orig.copy()
        self.rect = self.image.get_rect()
        self.radius = int(self.rect.width*.90/2)
        self.rect.x = random.randrange(0, WIDTH-self.rect.width)
        self.rect.y = random.randrange(-150,-100)       
        self.speedy = random.randrange(5,10)
        self.speedx = random.randrange(-3,3)
        self.rotation = 0
        self.rotation_speed = random.randrange(-8, 8)
        self.last_update = pygame.time.get_ticks()

    #添加火山石旋转效果
    def rotate(self):
        time_now = pygame.time.get_ticks()
        if time_now-self.last_update &amp;gt; 50:
            self.last_update = time_now
            self.rotation = (self.rotation+self.rotation_speed)%360
            new_image = pygame.transform.rotate(self.image_orig,self.rotation)
            old_center = self.rect.center
            self.image = new_image
            self.rect = self.image.get_rect()
            self.rect.center = old_center                

    def update(self):
        self.rotate()
        self.rect.x += self.speedx
        self.rect.y += self.speedy               
        if (self.rect.top &amp;gt; HEIGHT+10) or (self.rect.left &amp;lt; -25) or (self.rect.right &amp;gt; WIDTH+20):
            self.rect.x = random.randrange(0,WIDTH-self.rect.width)
            self.rect.y = random.randrange(-100,-40)
            self.speedy = random.randrange(1,8)       

class Bullet(pygame.sprite.Sprite):
    &#39;&#39;&#39;创建玩家炮弹类&#39;&#39;&#39;
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = bullet_img
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.bottom = y
        self.rect.centerx = x
        self.speedy = -10

    def update(self):
        self.rect.y += self.speedy
        if self.rect.bottom &amp;lt; 0:
            self.kill()

class EnemiesBullet(pygame.sprite.Sprite):
    &#39;&#39;&#39;创建敌机炮弹类&#39;&#39;&#39;
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = enemies_bullet_img
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.top = y
        self.rect.centerx = x
        self.speedy = 10

    def update(self):
        self.rect.y += self.speedy
        if self.rect.top &amp;gt; 600:
            self.kill()

class Missile(pygame.sprite.Sprite):
    &#39;&#39;&#39;创建导弹类&#39;&#39;&#39;
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = missile_img
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.bottom = y
        self.rect.centerx = x
        self.speedy = -10

    def update(self):
        self.rect.y += self.speedy
        if self.rect.bottom &amp;lt; 0:
            self.kill()

class Pow(pygame.sprite.Sprite):
    &#39;&#39;&#39;创建补给类&#39;&#39;&#39;
    def __init__(self, center):
        pygame.sprite.Sprite.__init__(self)
        self.type = random.choice([&#39;shield&#39;, &#39;gun&#39;])
        self.image = powerup_images[self.type]
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.speedy = 4

    def update(self):
        self.rect.y += self.speedy
        if self.rect.top &amp;gt; HEIGHT:
            self.kill()

#######################################主循环#######################################

#定义游戏开始界面标识
running = True
menu_display = True

while running:
    if menu_display:
        main_menu()
        pygame.time.wait(3000)
        pygame.mixer.music.stop()
        pygame.mixer.music.load(path.join(sound_folder,&#39;tgfcoder-FrozenJam-SeamlessLoop.ogg&#39;))
        pygame.mixer.music.play(-1)
        menu_display = False

        all_sprites = pygame.sprite.Group()
        player = Player()
        all_sprites.add(player)        
        mobs = pygame.sprite.Group()
        for i in range(4):
            newmob()
        lavas = pygame.sprite.Group()
        for i in range(4):
            newlava()
        bullets = pygame.sprite.Group()
        enemies_bullets = pygame.sprite.Group()
        powerups = pygame.sprite.Group()

        score = 0   

    clock.tick(FPS)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False

    all_sprites.update()

    #敌机与玩家炮弹碰撞检测
    hits = pygame.sprite.groupcollide(mobs,bullets,True,True)    
    for hit in hits:
        score += 50-hit.radius
        random.choice(expl_sounds).play()       
        expl = Explosion(hit.rect.center,&#39;lg&#39;)
        all_sprites.add(expl)
        if random.random() &amp;gt; 0.9:
            pow = Pow(hit.rect.center)
            all_sprites.add(pow)
            powerups.add(pow)
        newmob()

    #火山石与玩家炮弹碰撞检测
    hits = pygame.sprite.groupcollide(lavas,bullets,True,True)    
    for hit in hits:
        score += 50-hit.radius
        random.choice(expl_sounds).play()      
        expl = Explosion(hit.rect.center,&#39;lg&#39;)
        all_sprites.add(expl)
        if random.random() &amp;gt; 0.9:
            pow = Pow(hit.rect.center)
            all_sprites.add(pow)
            powerups.add(pow)
        newlava()

    #玩家与敌机碰撞检测
    hits = pygame.sprite.spritecollide(player,mobs,True,pygame.sprite.collide_circle)
    for hit in hits:
        player.shield -= hit.radius*2
        expl = Explosion(hit.rect.center,&#39;sm&#39;)
        all_sprites.add(expl)
        newmob()
        if player.shield &amp;lt;= 0:
            player_die_sound.play()
            death_explosion = Explosion(player.rect.center,&#39;player&#39;)
            all_sprites.add(death_explosion)
            player.hide()
            player.lives -= 1
            player.shield = 100

    #玩家与火山石碰撞检测
    hits = pygame.sprite.spritecollide(player,lavas,True,pygame.sprite.collide_circle)
    for hit in hits:
        player.shield -= hit.radius*2
        expl = Explosion(hit.rect.center,&#39;sm&#39;)
        all_sprites.add(expl)
        newlava()
        if player.shield &amp;lt;= 0:
            player_die_sound.play()
            death_explosion = Explosion(player.rect.center,&#39;player&#39;)
            all_sprites.add(death_explosion)
            player.hide()
            player.lives -= 1
            player.shield = 100

    #玩家与敌机炮弹碰撞检测
    hits = pygame.sprite.spritecollide(player,enemies_bullets,True,pygame.sprite.collide_circle)
    for hit in hits:
        player.shield -= hit.radius*2
        expl = Explosion(hit.rect.center,&#39;sm&#39;)
        all_sprites.add(expl)        
        if player.shield &amp;lt;= 0:
            player_die_sound.play()
            death_explosion = Explosion(player.rect.center,&#39;player&#39;)
            all_sprites.add(death_explosion)
            player.hide()
            player.lives -= 1
            player.shield = 100

    #玩家与补给碰撞检测
    hits = pygame.sprite.spritecollide(player,powerups,True)
    for hit in hits:
        if hit.type == &#39;shield&#39;:
            player.shield += random.randrange(10,30)
            if player.shield &amp;gt;= 100:
                player.shield = 100
        if hit.type == &#39;gun&#39;:
            player.powerup()

    if player.lives == 0 and not death_explosion.alive():
        pygame.time.wait(1000)
        screen.fill(BLACK)
        draw_text(screen, &amp;quot;Game Over&amp;quot;, 40, WIDTH/2, HEIGHT/3)
        pygame.display.update()
        pygame.time.wait(3000)
        menu_display = True

    #背景画卷向下滚动
    screen.fill(BLACK)    
    screen.blit(background,(0,height))
    height += 2
    if height &amp;gt;= -168:
        height = -936

    all_sprites.draw(screen)
    draw_text(screen,str(score),18,WIDTH/2,10)
    draw_shield_bar(screen,5,5,player.shield)    
    draw_lives(screen,WIDTH-100,5,player.lives,player_mini_img)

    pygame.display.flip()    

pygame.quit()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用百度指数了解社会事件</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E6%8C%87%E6%95%B0%E4%BA%86%E8%A7%A3%E5%88%86%E7%9C%81%E5%92%8C%E5%9F%8E%E5%B8%82%E7%9A%84%E7%A4%BE%E4%BC%9A%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E6%8C%87%E6%95%B0%E4%BA%86%E8%A7%A3%E5%88%86%E7%9C%81%E5%92%8C%E5%9F%8E%E5%B8%82%E7%9A%84%E7%A4%BE%E4%BC%9A%E4%BA%8B%E4%BB%B6/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;百度指数是以百度海量网民行为数据为基础的数据分享平台。在这里,你可以研究关键词搜索趋势、洞察网民兴趣和需求、监测舆情动向、定位受众特征。&lt;/p&gt;

&lt;p&gt;我以“疫情”和“口罩”两个关键词来看新冠疫情的公众关注情况。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://index.baidu.com/v2/main/index.html#/trend/%E7%96%AB%E6%83%85?words=%E7%96%AB%E6%83%85,%E5%8F%A3%E7%BD%A9&#34; target=&#34;_blank&#34;&gt;http://index.baidu.com/v2/main/index.html#/trend/%E7%96%AB%E6%83%85?words=%E7%96%AB%E6%83%85,%E5%8F%A3%E7%BD%A9&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;趋势研究&#34;&gt;趋势研究&lt;/h1&gt;

&lt;p&gt;地点选择“江苏”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-27a8fcbeae97a57d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;简单的百度指数，也可以借助于akshare爬取。按照&lt;a href=&#34;https://akshare.readthedocs.io/zh_CN/latest/data/event/event.html&#34; target=&#34;_blank&#34;&gt;akshare指数数据抓取部分&lt;/a&gt;的介绍，百度指数分为三部分，分别是搜索指数、资讯指数、媒体指数。具体可以操作如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import akshare as ak
cookie = &amp;quot;此处输入您在网页端登录百度指数后的 cookie 数据&amp;quot;
index_df1 = ak.baidu_search_index(word=&amp;quot;螺纹钢&amp;quot;, start_date=&#39;2010-12-27&#39;, end_date=&#39;2019-12-01&#39;, cookie=cookie)
index_df2 = ak.baidu_info_index(word=&amp;quot;螺纹钢&amp;quot;, start_date=&#39;2017-07-03&#39;, end_date=&#39;2019-12-01&#39;, cookie=cookie)
index_df3 = ak.baidu_media_index(word=&amp;quot;螺纹钢&amp;quot;, start_date=&#39;2010-12-27&#39;, end_date=&#39;2019-12-01&#39;, cookie=cookie)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-d063c2ac0ab15114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;如图中游览器请求头中的蓝色选中部分内容到 cookie 即可&#34; /&gt;&lt;/p&gt;

&lt;p&gt;想要了解更多？
- &lt;a href=&#34;https://github.com/jindaxiang/akshare/blob/master/akshare/index/index_weibo.py&#34; target=&#34;_blank&#34;&gt;akshare百度指数部分实现方式&lt;/a&gt;
- &lt;a href=&#34;https://cloudcrawler.club/categories/2019%E5%B9%B4%E6%9C%AB%E9%80%86%E5%90%91%E5%A4%8D%E4%B9%A0/&#34; target=&#34;_blank&#34;&gt;云爬虫技术研究笔记&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;需求图谱&#34;&gt;需求图谱&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-7956cab70c25ec77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;人群画像&#34;&gt;人群画像&lt;/h1&gt;

&lt;p&gt;点击地图，查看江苏的情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-14ed1226d23eb020.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;阅读文献&#34;&gt;阅读文献&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Shuanglong Li, Yunsong Chen, Guangye He. Mapping Public Concerns About Class Immobility in China.Social Indicators Research (2019) 144:745–765. &lt;a href=&#34;https://doi.org/10.1007/s11205-019-02075-2&#34; target=&#34;_blank&#34;&gt;https://doi.org/10.1007/s11205-019-02075-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ginsberg et al. (2009) “Detecting influenza epidemics using search engine query data”, Nature, &lt;a href=&#34;http://dx.doi.org/10.1038/nature07634&#34; target=&#34;_blank&#34;&gt;http://dx.doi.org/10.1038/nature07634&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lazer et al (2014) “The Parable of Google Flu: Traps in Big Data Analysis.” Science. &lt;a href=&#34;http://dx.doi.org/10.1126/science.1248506&#34; target=&#34;_blank&#34;&gt;http://dx.doi.org/10.1126/science.1248506&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Yang et al (2015) “Accurate estimation of influenza epidemics using Google search data via ARGO”, PNAS, &lt;a href=&#34;http://dx.doi.org/10.1073/pnas.1515373112&#34; target=&#34;_blank&#34;&gt;http://dx.doi.org/10.1073/pnas.1515373112&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lampos et al 2015 “Advances in nowcasting influenza-like illness rates using search query logs” Scientific Reports, &lt;a href=&#34;http://dx.doi.org/10.1038/srep12760&#34; target=&#34;_blank&#34;&gt;http://dx.doi.org/10.1038/srep12760&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;练习&#34;&gt;练习&lt;/h1&gt;

&lt;p&gt;搜索一下散装江苏和苏大强是如何成名的？&lt;/p&gt;

&lt;p&gt;words=疫情,口罩,散装江苏,苏大强,江苏&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-8c0e58dad4abb153.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;江苏各城市&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-e417dd4bac768b92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;散装江苏和苏大强&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-6171d4fbe0fe6967.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;疫情&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;

&lt;p&gt;请搜索城市级别的数据，回答江苏的哪一个城市更关注散装江苏？哪一个城市最关注苏大强？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>帝国理工和西北大学估算武汉实际感染人数的模型</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E5%B8%9D%E5%9B%BD%E7%90%86%E5%B7%A5%E5%92%8C%E8%A5%BF%E5%8C%97%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E5%B8%9D%E5%9B%BD%E7%90%86%E5%B7%A5%E5%92%8C%E8%A5%BF%E5%8C%97%E5%A4%A7%E5%AD%A6%E7%9A%84%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;p&gt; &lt;/p&gt;

&lt;p&gt;已有 24688 次阅读 2020-1-24 08:44 |系统分类:&lt;a href=&#34;http://blog.sciencenet.cn/home.php?mod=space&amp;amp;do=blog&amp;amp;view=all&amp;amp;uid=3075&amp;amp;catid=1&#34; target=&#34;_blank&#34;&gt;科研笔记&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有人已经注意到了海外研究团队基于现有公开数据对武汉当地感染武汉肺炎的实际人数进行估计。目前影响比较大，大家讨论比较多的分析报告主要有两个来源：
- 一是Alessandro Vespignani教授领衔的西北大学研究组的系列报告[1]，
- 二是以一个帝国理工的日本妹子（Natsuko Imai博士）为第一作者的系列报告[2]。为了方便，后文称为帝国理工报告和西北大学报告。&lt;a href=&#34;https://www.imperial.ac.uk/media/imperial-college/medicine/sph/ide/gida-fellowships/2019-nCoV-outbreak-report-22-01-2020.pdf&#34; target=&#34;_blank&#34;&gt;Estimating the potential total number of novel Coronavirus in Wuhan City, China&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;两个报告采用的数据都是公开报道的武汉出境人员被确诊感染2019-nCoV的记录，但使用的方法有所不同。但是两个报告的结论惊人一致。
1. 帝国理工报告认为武汉全市在2020年1月18日左右差不多开始出现症状的2019-nCoV实际感染人数约为&lt;strong&gt;4000人&lt;/strong&gt;，不确定性是1000-9700（通过参数敏感性分析得到的）；
2. 西北大学报告认为武汉全市在2020年1月20日左右2019-nCoV实际感染人数约为&lt;strong&gt;4050人&lt;/strong&gt;，95%置信区间为1700-7950。估计这两天随着越南等地新确诊病例的出现，武汉感染人数的估计值还会上升。&lt;/p&gt;

&lt;p&gt;两个系列报告所使用的数据其实否非常简单（他们暂未获得或者暂未使用国内传播的数据，可能是因为传播路径太复杂），就是经由国际航班出境，且在境外被确诊的2019-nCoV感染人数。但两者使用的方法不太一样。下面我尽可能用科普的方法介绍两种方法的基本思路，并分析现有方法存在的缺陷。&lt;/p&gt;

&lt;p&gt;帝国理工报告的方法非常简单。Imai团队列出了一个简单的关系：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;境外确诊的病人数 = 武汉总感染人数 * 武汉人每天坐飞机出境的概率 * 可以供武汉感染者出境且在境外才被发现的时间窗口长度（天数）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-b259668bb5f530d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;只需要更新海外确诊病人数量，就可以估计武汉的实际病人数量。感兴趣的同学可以试一下：&lt;a href=&#34;https://luxxxlucy.github.io/projects/2020_wuhan/index.html&#34; target=&#34;_blank&#34;&gt;自己动手估计一下&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;oversea_num = range(100)
wuhan_num = [19000000*i/(10*3301) for i in oversea_range]
plt.plot(oversea_num, wuhan_num, color = &#39;darkblue&#39;, marker = &#39;.&#39;)
plt.title(&#39;帝国理工估计方法&#39;)
plt.xlabel(&#39;海外确诊数&#39;)
plt.ylabel(&#39;武汉实际患病人数&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-d73d557af38c83d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;线性关系&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中，可以供武汉感染者出境且在境外才被发现的时间窗口长度（天数）就是染病潜伏未出现症状的时期（Imai等人认为是5-6天，是用的SARS[3]和MERS[4]的结果）以及出现症状到医院确诊的时期（Imai等人认为是4-5天，这个时合理的，因为防控早期，感冒发热不影响出境，大家也不当回事儿），大约为10天。武汉人每天做飞机出境的概率就用武汉每天国际航班出境人数除以武汉国际机场覆盖的人口数。&lt;/p&gt;

&lt;p&gt;Imai小组用武汉总人口（含流动人口）1900万作为武汉国际机场能够覆盖的人口数（有那么多人如果出国会选择从武汉国际机场出去），武汉国际机场出境游客平均每天3301人，截止1月21日下午4点，境外确诊病例7例（泰国3，日本1，韩国1，台湾1，美国1）。如果记武汉总人数为N，就有了一个显然的关系&lt;/p&gt;

&lt;p&gt;7=N*10*3301/19000000，
得到 N = (19000000*7)/(10*3301)=4029&lt;/p&gt;

&lt;p&gt;可以解出N=4029——这就是4000这个约数的来源。&lt;/p&gt;

&lt;p&gt;西北大学小组的方法要复杂得多，一般而言，这个方法也更为有效和精确。他们已经在过去的研究中
- 构建了一个全球人口分布以及不同区域之间流动性和可导致感染的接触强度的一个大型数据库
    - 其中全球被分为3300个区域，任意两个区域之间的流动性数据都有，人口数据主要来源于一个国际合作项目（按0.25*0.25经纬度，大约25km*25km把世界划分成若干区域，估计这个区域的人口数）[5]。
- 这套数据加上他们成熟的传染病模型已经成功用于很多真实疾病传播早期的态势感知和发展预测，效果很好。其中整体的计算框架和方法可以参考文献[6]。&lt;/p&gt;

&lt;p&gt;就目前这个2019-nCoV武汉感染人数估计的问题，他们把*境外已经确诊的人数*作为证据D，*武汉待估计的感染人数*为N，则可应用&lt;strong&gt;贝叶斯定理&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;$$P(N)P(D|N)=P(D)P(N|D)$$&lt;/p&gt;

&lt;p&gt;我们要估计的就是P(N|D)，既给定境外确诊人数，武汉感染人数大概多少（证据D被认为是确定的，例如1月18日D为3个人感染，1月21日D为7个人感染）。&lt;/p&gt;

&lt;p&gt;Vespignani小组对N进行抽样，做大量实验（模型中先假设武汉已经有了多少感染人数，再看P(D|N)的值，抽样时N从给定的P(N)里面按概率取）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;尽管帝国理工报告和西北大学报告所使用的方法不同，但是得到的结论是惊人一致的！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这两个报告存在的共同问题就是&lt;strong&gt;数据样本太小，因此估计的不确定区间特别大&lt;/strong&gt;。因为样本特别小，还有可能存在系统性误差，例如可能喜欢吃野味的人更喜欢出境游。&lt;/p&gt;

&lt;p&gt;从方法细节来讲，帝国理工小组因为没有自己的全球疾病接触紧密度数据库，所以用平均出境人数，而没有具体到去泰国、去日本、去美国等等地方的人数，会存在偏差。西北大学的数据更新不太及时，不一定能够抓住春节前中国游客出行的一些阵发特性。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有没有更好的数据呢？有，已有更好数据，还在协调汇总。&lt;/li&gt;
&lt;li&gt;是否可以通过国内的感染情况做更精确的估计呢？可以。&lt;/li&gt;
&lt;li&gt;有没有人在做呢？有，不止一个团队。&lt;/li&gt;
&lt;li&gt;大约什么结果呢？现在不好说。&lt;/li&gt;
&lt;li&gt;帝国理工和西北大学报告的结果有没有参考价值呢？&lt;strong&gt;有！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然我不懂也没有看到病毒学方面的详细报导，但是我个人感觉&lt;strong&gt;2019-nCoV致病能力低于SARS&lt;/strong&gt;——病的进程较缓慢，严重程度较低，致死率较低，&lt;strong&gt;但传播能力超过了SARS&lt;/strong&gt;——有更长的无症状和轻微症状时期，且接触传染能力（各种接触方式和接触强度下被感染的概率）和基本再生数（R0，疾病爆发初期平均一个人能够感染的人数）应该不会低于SARS。&lt;strong&gt;对于病毒而言，这是进化了，不是弱化了&lt;/strong&gt;，因为它们如果有知，应该目的不是杀死人而是传染更多的人。&lt;/p&gt;

&lt;p&gt;我的建议是我们大家平时要戴口罩、勤洗手、少出门、不聚会，遇到疑似问题要及时报告。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;必须要把这次武汉肺炎看作一次比SARS还厉害的对手来对付&lt;/strong&gt;[7]。&lt;/p&gt;

&lt;p&gt;如果我们应对不充分，武汉肺炎将成为肆虐神州大地几十年甚至更长时间的常规性传染病，我们的下一代、再下一代、再再下一代都会一次次感染这个病。&lt;/p&gt;

&lt;p&gt;[1] M. Chinazzi, et al., Series Reports Entitled “Preliminary assessment of the International Spreading Risk Associated with the 2019 novel Coronavirus (2019-nCoV) outbreak in Wuhan City”.&lt;/p&gt;

&lt;p&gt;[2] N. Imai, et al., Series Reports Entitled “Estimating the potential total number of novel Coronavirus in Wuhan City, China”.&lt;/p&gt;

&lt;p&gt;[3] C. A. Donnelly, et al., Epidemiological determinants of spreading of causal agent of severe acute respiratory syndrome in Hong Kong, Lancet 361 (2003) 1761-1766.&lt;/p&gt;

&lt;p&gt;[4] S. Cauchemez, et al., Middle Esat respiratory syndrome coronavirus, Lancet Infect. Dis. 14 (2014) 50-56.&lt;/p&gt;

&lt;p&gt;[5] The Gridded Population Project, see database from the website: sedac.ciesin.columbia.edu.&lt;/p&gt;

&lt;p&gt;[6] D. Balcan, et al., Modeling the spreading of infectious diseases, Journal of Computational Science 1 (2010) 132-145.&lt;/p&gt;

&lt;p&gt;[7] Editorials, Stop the Wuhan coronavirus, Nature 577 (2020) 450.&lt;/p&gt;

&lt;p&gt;本文来自周涛科学网博客。链接地址：&lt;a href=&#34;http://blog.sciencenet.cn/blog-3075-1215424.html&#34; target=&#34;_blank&#34;&gt;http://blog.sciencenet.cn/blog-3075-1215424.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>微博讨论与covid19疫情的关联</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E5%BE%AE%E5%8D%9A%E8%AE%A8%E8%AE%BA%E5%92%8C2019ncov%E7%96%AB%E6%83%85%E6%9C%89%E5%A4%9A%E5%A4%A7%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E5%BE%AE%E5%8D%9A%E8%AE%A8%E8%AE%BA%E5%92%8C2019ncov%E7%96%AB%E6%83%85%E6%9C%89%E5%A4%9A%E5%A4%A7%E5%85%B3%E7%B3%BB/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import akshare as ak
import pylab as plt
import numpy as np

plt.style.use(&#39;fivethirtyeight&#39;)

epidemic_hist_all_df = ak.epidemic_hist_all()
df = ak.epidemic_163(indicator=&amp;quot;历史&amp;quot;)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取每日新增数量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alist = df[&#39;confirm&#39;].tolist()
daily_conf = []
for k, i in enumerate(alist):
    if k == 0:
        daily_conf.append(i)
    if k &amp;gt; 0:
        daily_conf.append(i - alist[k-1])
df[&#39;confirm_daily&#39;] = daily_conf  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取微博指数数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df_index = ak.weibo_index(word=&amp;quot;疫情&amp;quot;, time_type=&amp;quot;3month&amp;quot;)
df_index.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;合并数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dat = df_index.merge(df, how=&#39;inner&#39;, left_index = True, right_index = True )
dat.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;plt.figure(figsize=(12, 6), dpi = 200)
plt.plot(dat.index, dat[&#39;confirm_daily&#39;], label = &#39;每日新增确诊数量&#39;)
plt.plot(dat.index, dat[&#39;疫情&#39;]/10000, label = &#39;“疫情”微博指数/10000&#39;)
#plt.yscale(&#39;log&#39;)
plt.legend(fontsize = 20)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-007e629c73bedbb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;时间序列&#34; /&gt;&lt;/p&gt;

&lt;p&gt;画一下二者的散点图&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plt.plot(dat[&#39;疫情&#39;], dat[&#39;confirm_daily&#39;], &#39;ro&#39;)
plt.xscale(&#39;log&#39;)
plt.yscale(&#39;log&#39;)
plt.xlabel(&#39;“疫情”微博指数/10000&#39;, fontsize = 20)
plt.ylabel(&#39;每日新增确诊数量&#39;, fontsize = 20)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-99f08ac776150087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;scatter&#34; /&gt;&lt;/p&gt;

&lt;p&gt;算一下相关&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;np.corrcoef(dat[&#39;疫情&#39;], dat[&#39;confirm_daily&#39;])
# 0.2384777
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;思考&#34;&gt;思考 🤔&lt;/h1&gt;

&lt;p&gt;如果没有2月12日的数据剧增会怎样？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-6b6c3ea64208348e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;并未消退的疫情讨论&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>舆论热点预测疫情感染？</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E8%88%86%E8%AE%BA%E4%BA%8B%E4%BB%B6%E7%83%AD%E5%BA%A6%E5%AF%B9%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E%E6%96%B0%E5%A2%9E%E7%A1%AE%E8%AF%8A%E6%95%B0%E9%87%8F%E6%9C%89%E5%BD%B1%E5%93%8D%E5%90%97/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E8%88%86%E8%AE%BA%E4%BA%8B%E4%BB%B6%E7%83%AD%E5%BA%A6%E5%AF%B9%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E%E6%96%B0%E5%A2%9E%E7%A1%AE%E8%AF%8A%E6%95%B0%E9%87%8F%E6%9C%89%E5%BD%B1%E5%93%8D%E5%90%97/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&#34;问题&#34;&gt;问题&lt;/h1&gt;

&lt;p&gt;RQ: 舆论事件热度对新冠肺炎新增确诊数量有影响吗？&lt;/p&gt;

&lt;h1 id=&#34;数据&#34;&gt;数据&lt;/h1&gt;

&lt;p&gt;我们使用知微事见的数据来理解这一研究问题。 知微事见,专注于热点事件、企业危机事件、营销事件的研究与分析。当事件符合下列标准之一时，将被收录至知微事见事件库中：1.在短时间内达到高传播量的事件；2.在长期内都保持一定传播量的事件；3.在网络社交媒体中引起热议的事件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.什么是事件影响力指数？事件影响力指数（Event Influence Index，EII）是基于全网的社交媒体和网络媒体数据，用来刻画单一事件在互联网上的传播效果的权威指标。指数的计算数据来自全网的社交媒体和网络媒体数据。事件影响力指数是根据事件在社交媒体（以微博、微信为主）和网络媒体上的传播效果进行加和，加和后的事件影响力再通过归一化运算得到范围在0 ~ 100之间的事件影响力指数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-4b48b64f5ad6ed3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;知微事见&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到新冠肺炎依然占据舆论热点。&lt;/p&gt;

&lt;p&gt;我们使用的数据来自针对新冠肺炎事件脉络的梳理：&lt;a href=&#34;http://xgml.zhiweidata.net/?from=floating#/&#34; target=&#34;_blank&#34;&gt;http://xgml.zhiweidata.net/?from=floating#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-6add4814a58342ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;数据来源&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;数据读取和可视化&#34;&gt;数据读取和可视化&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import pylab as plt
import pandas as pd
import seaborn as sns
import json

j = json.load(open(&#39;zhiwei_line.json&#39;))
df = pd.DataFrame(j)
df.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-a7cb51452028ae96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;读取数据&#34; /&gt;&lt;/p&gt;

&lt;p&gt;查看一下数据基本类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;df.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 52 entries, 0 to 51
Data columns (total 5 columns):
 #   Column   Non-Null Count  Dtype&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;0   time     52 non-null     object
 1   voice    52 non-null     object
 2   heat     52 non-null     object
 3   case     52 non-null     object
 4   allCase  52 non-null     object
dtypes: object(5)
memory usage: 2.2+ KB&lt;/p&gt;

&lt;p&gt;结果发现都是object，未能被正确识别。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 将object转化为数值型的类型
df[&#39;heat&#39;] = [float(i) for i in df[&#39;heat&#39;]]
df[&#39;case&#39;] = [int(i) for i in df[&#39;case&#39;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-1856cde3b875de49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;可视化&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;双y坐标轴可视化&#34;&gt;双y坐标轴可视化&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# 双y坐标轴可视化
fig = plt.figure(figsize=(12,6),dpi = 200)
plt.style.use(&#39;fivethirtyeight&#39;)

ax1=fig.add_subplot(111)
ax1.plot(df[&#39;time&#39;],  df[&#39;heat&#39;], &#39;r-s&#39;)
ax1.set_ylabel(&#39;舆论热度&#39;, fontsize = 16)
ax1.tick_params(axis=&#39;x&#39;, rotation=60)
ax1.legend((&#39;舆论热度&#39;,),loc=&#39;upper left&#39;)

ax2=ax1.twinx()
ax2.plot(df[&#39;time&#39;], df[&#39;case&#39;], &#39;g-o&#39;)
ax2.set_ylabel(&#39;新增确诊&#39;, fontsize = 16)
ax2.legend((&#39;新增确诊&#39;,),loc=&#39;upper right&#39;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;格兰杰检验&#34;&gt;格兰杰检验&lt;/h1&gt;

&lt;p&gt;接下来进行格兰杰因果检验。&lt;/p&gt;

&lt;p&gt;The Null hypothesis for &lt;a href=&#34;http://www.statsmodels.org/dev/generated/statsmodels.tsa.stattools.grangercausalitytests.html&#34; target=&#34;_blank&#34;&gt;grangercausalitytests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;H0&lt;/strong&gt;: the time series in the second column, x2, does NOT Granger cause the time series in the first column, x1.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grange causality means that past values of x2 have a statistically significant effect on the current value of x1, taking past values of x1 into account as regressors. We reject the null hypothesis that x2 does not Granger cause x1 if the pvalues are below a desired size of the test.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;import statsmodels.api as sm
from statsmodels.tsa.stattools import grangercausalitytests
import numpy as np

data = df[21:][[&#39;case&#39;,&#39;heat&#39; ]].pct_change().dropna()
data.plot();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-d0eda257416ebbe2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gc_res = grangercausalitytests(data,4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Granger Causality
number of lags (no zero) 1
ssr based F test:         F=0.0800  , p=0.7796  , df_denom=26, df_num=1
ssr based chi2 test:   chi2=0.0892  , p=0.7652  , df=1
likelihood ratio test: chi2=0.0891  , p=0.7653  , df=1
parameter F test:         F=0.0800  , p=0.7796  , df_denom=26, df_num=1&lt;/p&gt;

&lt;p&gt;Granger Causality
number of lags (no zero) 2
ssr based F test:         F=7.5340  , p=0.0030  , df_denom=23, df_num=2
ssr based chi2 test:   chi2=18.3436 , p=0.0001  , df=2
likelihood ratio test: chi2=14.1086 , p=0.0009  , df=2
parameter F test:         F=7.5340  , p=0.0030  , df_denom=23, df_num=2&lt;/p&gt;

&lt;p&gt;Granger Causality
number of lags (no zero) 3
ssr based F test:         F=13.4029 , p=0.0001  , df_denom=20, df_num=3
ssr based chi2 test:   chi2=54.2818 , p=0.0000  , df=3
likelihood ratio test: chi2=29.7563 , p=0.0000  , df=3
parameter F test:         F=13.4029 , p=0.0001  , df_denom=20, df_num=3&lt;/p&gt;

&lt;p&gt;Granger Causality
number of lags (no zero) 4
ssr based F test:         F=8.8419  , p=0.0005  , df_denom=17, df_num=4
ssr based chi2 test:   chi2=54.0915 , p=0.0000  , df=4
likelihood ratio test: chi2=29.2519 , p=0.0000  , df=4
parameter F test:         F=8.8419  , p=0.0005  , df_denom=17, df_num=4&lt;/p&gt;

&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;

&lt;p&gt;舆论热度可以显著地导致新冠肺炎的确诊数量。&lt;/p&gt;

&lt;h2 id=&#34;练习&#34;&gt;练习&lt;/h2&gt;

&lt;p&gt;请使用格兰杰检验看一下反过来的问题：RQ2: 新冠肺炎确诊数量是否可以导致舆论热度？&lt;/p&gt;

&lt;h2 id=&#34;思考&#34;&gt;思考 🤔&lt;/h2&gt;

&lt;p&gt;Question: 这是伪相关吗？为什么？不了解伪相关，看这几个例子🌰 &lt;a href=&#34;http://www.tylervigen.com/spurious-correlations&#34; target=&#34;_blank&#34;&gt;http://www.tylervigen.com/spurious-correlations&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;延伸&#34;&gt;延伸&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bertram Scheufele, Alexander Haas, Hans-Bernd Brosius （2011）Mirror or Molder? A Study of Media Coverage, Stock Prices, and Trading Volumes in Germany. &lt;em&gt;Journal of Communication&lt;/em&gt;, Volume 61, Issue 1, February 2011, Pages 48–70. &lt;a href=&#34;https://onlinelibrary.wiley.com/doi/full/10.1111/j.1460-2466.2010.01526.x&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This article investigates the short‐term relationship between media coverage, stock prices, and trading volumes of eight listed German companies. A content analysis of news reports about the selected companies and a secondary analysis of the daily changes in closing prices and the trading volumes of these companies were combined in a time‐series design. After ARIMA‐modeling each of them, the results suggest that media coverage rather reflects than shapes the development at stock exchanges from a short‐term perspective (2 months). There were almost no hints for a widespread media effect, that is, an impact on so many investors that it will result in a measurable change in stock prices or trading volumes. Finally, theoretical and methodological consequences for exploring widespread media effects are discussed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-9850cf8ca1a77422.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-a7823e0149a441ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;为什么不同步？公众为了可以提前预知？或者说为什么确诊数滞后？&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>计算新闻在行动</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB%E5%9C%A8%E8%A1%8C%E5%8A%A8/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB%E5%9C%A8%E8%A1%8C%E5%8A%A8/</guid>
      <description>

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;这是南京大学《数据新闻》班级的作品展示，很多东西是半成品，欢迎提意见！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;苏格拉底说：了解你自己！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;疫情如火&#34;&gt;疫情如火&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;2019年底，围绕武汉市为核心爆发了新型冠状病毒肺炎疫情。&lt;/li&gt;
&lt;li&gt;2020年1月20日，国家卫健委高级别专家组组长、中国工程院院士、呼吸病学专家钟南山说“肯定‘人传人’。” 来源：财新网  &lt;a href=&#34;http://reporter.caixin.com/609708/%E9%99%88%E5%AE%9D%E6%88%90&#34; target=&#34;_blank&#34;&gt;陈宝成&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-2ec78c90e6c155b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;钟南山宣告存在人传人事实&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;钟南山表示，判断依据就是目前的资料。他在接受央视《新闻一加一》采访时也举例称，在广东有两个病例没有去过武汉，但他们的家人去了武汉，回到家里，这两个家庭都有人染上了新型冠状病毒。经过基因病毒的检测，是一致的。因此“现在可以说，肯定有人传人现象。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;武汉封城&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;自2020年1月23日10时起，全市城市公交、地铁、轮渡、长途客运暂停运营；无特殊原因，市民不要离开武汉，机场、火车站离汉通道暂时关闭。恢复时间另行通告。&lt;a href=&#34;https://www.sohu.com/a/368763254_100271716&#34; target=&#34;_blank&#34;&gt;更多信息&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;返程复工&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;数据来源&#34;&gt;数据来源&lt;/h1&gt;

&lt;p&gt;不断更新当中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/839-Studio&#34; target=&#34;_blank&#34;&gt;澎湃 839-Studio&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/839-Studio/Noval-Coronavirus-763-Cases&#34; target=&#34;_blank&#34;&gt;Noval-Coronavirus-763-Cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/839-Studio/Novel-Coronavirus-Updates&#34; target=&#34;_blank&#34;&gt;Novel-Coronavirus-Updates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/fivethirtyeight/data&#34; target=&#34;_blank&#34;&gt;fivethirtyeight/data&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;为什么选择简书&#34;&gt;为什么选择简书？&lt;/h1&gt;

&lt;h4 id=&#34;1-markdown的支持&#34;&gt;1. Markdown的支持&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas ad pd

print(&#39;hello world&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-数学公式&#34;&gt;2. 数学公式&lt;/h4&gt;

&lt;p&gt;$$E = MC^2$$&lt;/p&gt;

&lt;h4 id=&#34;3-直接粘贴图片&#34;&gt;3. 直接粘贴图片&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-0bb2c888aaa289c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;新增确诊数量&#34; /&gt;&lt;/p&gt;

&lt;p&gt;更重要的是：同学们觉得知乎账号太隐私了，不适合分享个人做的东西！Orz 为师震惊了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-4c280f232892ca5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;震惊脸：这是知乎被黑的最惨的一次！&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;学生分组&#34;&gt;学生分组&lt;/h1&gt;

&lt;h1 id=&#34;武汉加油&#34;&gt;武汉加油&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-b652783a4cad4ff4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;武汉加油&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>记疫：一个数据新闻作品</title>
      <link>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E8%AE%B0%E7%96%AB%E4%B8%80%E4%B8%AA%E5%BE%88%E6%A3%92%E7%9A%84%E6%95%B0%E6%8D%AE%E6%96%B0%E9%97%BB%E4%BD%9C%E5%93%81/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://chengjunwang.com/%E8%AE%A1%E7%AE%97%E6%96%B0%E9%97%BB/%E8%AE%B0%E7%96%AB%E4%B8%80%E4%B8%AA%E5%BE%88%E6%A3%92%E7%9A%84%E6%95%B0%E6%8D%AE%E6%96%B0%E9%97%BB%E4%BD%9C%E5%93%81/</guid>
      <description>&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://h5.oeeee.com/h5/v20/nCovTimeline/&#34; target=&#34;_blank&#34;&gt;http://h5.oeeee.com/h5/v20/nCovTimeline/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/38934-32209813c1f3b0f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;记疫&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

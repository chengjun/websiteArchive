<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on </title>
    <link>https://chengjunwang.com/en/tags/api/index.xml</link>
    <description>Recent content in Api on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Cheng-Jun Wang</copyright>
    <atom:link href="/en/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Scraping tweets using Twitter stream API</title>
      <link>https://chengjunwang.com/en/post/en/2013-01-20-scraping-tweets-from-twitter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chengjunwang.com/en/post/en/2013-01-20-scraping-tweets-from-twitter/</guid>
      <description>&lt;p&gt;I want to randomly sample twitter streams. Thus, i turn to the &lt;a href=&#34;https://dev.twitter.com/docs/api/streaming&#34; target=&#34;_blank&#34;&gt;stream api of twitter&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The set of streaming APIs offered by Twitter give developers low latency access to Twitter&amp;rsquo;s global stream of Tweet data. A proper implementation of a streaming client will be pushed messages indicating Tweets and other events have occurred, without any of the overhead associated with polling a REST endpoint.[&lt;a href=&#34;https://dev.twitter.com/docs/api/streaming&#34; target=&#34;_blank&#34;&gt;from Twitter&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://weblab.com.cityu.edu.hk/blog/chengjun/files/2013/01/Picture1-300x188.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, as the first step, you should register the stream api on Twitter to get the consumer key, consumer secret, access key, and access secret.&lt;/p&gt;

&lt;p&gt;With the help of &lt;a href=&#34;https://github.com/tweepy/tweepy&#34; target=&#34;_blank&#34;&gt;tweepy package of Python&lt;/a&gt;, I tried the following scripts. So far it works pretty well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Twitter API Crawler
# -*- coding: utf-8 -*-

&#39;&#39;&#39;
Author: chengjun wang
Email: wangchj04@gmail.com
Hong Kong, 2013/01/20
&#39;&#39;&#39;
import sys
import tweepy
import codecs
from time import clock

&#39;&#39;&#39;OAuth Authentication&#39;&#39;&#39;
consumer_key=&amp;quot;xcEI4sb...fi6AzBQ&amp;quot;
consumer_secret=&amp;quot;5nfeG8...jUX8nU2pafr4hU&amp;quot;
access_token=&amp;quot;37595783-Fazh...8fPaH5IaTlz7y&amp;quot;
access_token_secret=&amp;quot;fyqUf5...YijKwvQe3I&amp;quot;

auth1 = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth1.set_access_token(access_token, access_token_secret)
api = tweepy.API(auth1)

&#39;&#39;&#39;
# Note: Had you wanted to perform the full OAuth dance instead of using
# an access key and access secret, you could have uses the following
# four lines of code instead of the previous line that manually set the
# access token via auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET).
# auth_url = auth.get_authorization_url(signin_with_twitter=True)
# webbrowser.open(auth_url)
# verifier = raw_input(&#39;PIN: &#39;).strip()
# auth.get_access_token(verifier)
&#39;&#39;&#39;

file = open(&amp;quot;C:/Python27/twitter/mydata6.csv&amp;quot;,&#39;wb&#39;) # save to csv file

print api.me().name # api.update_status(&#39;Updating using OAuth authentication via Tweepy!&#39;)

start = clock()
print start

&#39;&#39;&#39;Specify the stream&#39;&#39;&#39;
class StreamListenerChengjun(tweepy.StreamListener):
    def on_status(self, status):
        try:
            tweet = status.text.encode(&#39;utf-8&#39;)
            tweet = tweet.replace(&#39;\n&#39;, &#39;\\n&#39;)
            user = status.author.screen_name.encode(&#39;utf-8&#39;)
            userid = status.author.id
            time = status.created_at
            source = status.source
            tweetid = status.id
            timePass = clock()-start
            if timePass%60==0:
                print &amp;quot;I have been working for&amp;quot;, timePass, &amp;quot;seconds.&amp;quot;
            if not (&#39;RT @&#39; in tweet) :  # Exclude re-tweets
                print &amp;gt;&amp;gt;file, &amp;quot;%s,%s,%s,%s,|%s|,%s&amp;quot; % (userid, user, time, tweetid, tweet, source)

        except Exception, e:
            print &amp;gt;&amp;gt; sys.stderr, &#39;Encountered Exception:&#39;, e
            pass
    def on_error(self, status_code):
        print &#39;Error: &#39; + repr(status_code)
        return True # False to stop
    def on_delete(self, status_id, user_id):
        &amp;quot;&amp;quot;&amp;quot;Called when a delete notice arrives for a status&amp;quot;&amp;quot;&amp;quot;
        print &amp;quot;Delete notice for %s. %s&amp;quot; % (status_id, user_id)
        return
    def on_limit(self, track):
        &amp;quot;&amp;quot;&amp;quot;Called when a limitation notice arrvies&amp;quot;&amp;quot;&amp;quot;
        print &amp;quot;!!! Limitation notice received: %s&amp;quot; % str(track)
        return
    def on_timeout(self):
        print &amp;gt;&amp;gt; sys.stderr, &#39;Timeout...&#39;
        time.sleep(10)
        return True

&#39;&#39;&#39;Link the tube with tweet stream&#39;&#39;&#39;
streamTube = tweepy.Stream(auth=auth1, listener=StreamListenerChengjun(), timeout= 300)  # https://github.com/tweepy/tweepy/issues/83 # setTerms = [&#39;good&#39;, &#39;goodbye&#39;, &#39;goodnight&#39;, &#39;good morning&#39;] # streamer.filter(track = setTerms)
streamTube.sample()

file.close()
pass

timePass = time.clock()-start
print timePass
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>

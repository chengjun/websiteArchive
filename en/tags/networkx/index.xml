<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networkx on </title>
    <link>https://chengjun.github.io/en/tags/networkx/index.xml</link>
    <description>Recent content in Networkx on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Cheng-Jun Wang</copyright>
    <atom:link href="/en/tags/networkx/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NetworkX初步：创建网络、提取属性和绘图</title>
      <link>https://chengjun.github.io/en/post/cn/2014-08-14-networkx-intro/</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chengjun.github.io/en/post/cn/2014-08-14-networkx-intro/</guid>
      <description>&lt;p&gt;NetworkX是使用python分析网络数据的重要武器。它的使用非常简单。&lt;/p&gt;

&lt;p&gt;首先，创建网络对象：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import matplotlib.pyplot as plt
import networkx as nx

G=nx.DiGraph()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，添加链接：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;G.add_edge(&#39;source&#39;,1,weight=80)
G.add_edge(1,2,weight=50)
G.add_edge(1,3,weight=30)
G.add_edge(3,2,weight=10)
G.add_edge(2,4,weight=20)
G.add_edge(2,5,weight=30)
G.add_edge(4,5,weight=10)
G.add_edge(5,3,weight=5)
G.add_edge(2,&#39;sink&#39;,weight=10)
G.add_edge(4,&#39;sink&#39;,weight=10)
G.add_edge(3,&#39;sink&#39;,weight=25)
G.add_edge(5,&#39;sink&#39;,weight=35)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以很容易提取边的权重:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;edges,colors = zip(*nx.get_edge_attributes(G,&#39;weight&#39;).items())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;计算加权过的出度：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d = G.out_degree(weight = &#39;weight&#39;) #计算节点的中心度
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选择一个常用的可视化方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pos=nx.spring_layout(G) #设置网络的布局
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;绘制网络:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nx.draw(G, pos, node_color = &#39;orange&#39;, with_labels = True,
        nodelist = d.keys(), node_size = [v*5 for v in d.values()], 
        edgelist = edges, edge_color = colors, width = 5, edge_cmap=plt.cm.Blues)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://chengjun.qiniudn.com/demo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;计算流距离：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;&#39;&#39;
# get flow distance
&#39;&#39;&#39;
def toSink(G, i):
        try:
            di = G[i][&#39;sink&#39;].values()[0]
        except:
            di = 0 
        return di

def flowDistanceDT(G): #input a balanced nx graph
    R = G.reverse()
    mapping = {&#39;source&#39;:&#39;sink&#39;,&#39;sink&#39;:&#39;source&#39;} 
    H = nx.relabel_nodes(R,mapping)
    #---------initialize flow distance dict------
    L = dict((i,1) for i in G.nodes())  #FlowDistance
    #---------prepare weighted out-degree dict------
    D = {i: toSink(G, i) for i in G.nodes()} #Di
    T = G.out_degree(weight=&#39;weight&#39;)        #Ti
    #---------iterate until converge------------
    ls = np.array(L.values())
    delta = len(L)*0.01 + 1
    while delta &amp;gt; len(L)*0.01:
        for i in L:
            l=1
            for m,n in H.edges(i):
                l+=L[n]*H[m][n].values()[0]/float(T[m])
            L[i]=l
        delta = sum(np.abs(np.array(L.values()) - ls))
        ls = np.array(L.values())
    #---------clean the result-------
    del L[&#39;sink&#39;]
    for i in L:
        L[i]-=1
    L[&#39;sink&#39;] = L.pop(&#39;source&#39;)
    T[&#39;sink&#39;] = T.pop(&#39;source&#39;)
    D[&#39;sink&#39;] = D.pop(&#39;source&#39;)
    return L.values(), D.values(), T.values()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
